@article{mccarthy_recursive_1960,
  title = {Recursive functions of symbolic expressions and their computation by machine, {{Part I}}},
  volume = {3},
  timestamp = {2015-09-02T15:04:07Z},
  number = {4},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  author = {McCarthy, John},
  date = {1960},
  pages = {184--195},
  file = {McCarthy_1960_Recursive_functions_of_symbolic_expressions_and_their_computation_by_machine,.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CZJBCCPU/McCarthy_1960_Recursive_functions_of_symbolic_expressions_and_their_computation_by_machine,.pdf:application/pdf}
}

@article{mccarthy_micromanual_1978,
  title = {A micro-manual for {{LISP}}-not the whole truth},
  volume = {13},
  timestamp = {2015-09-02T15:04:07Z},
  number = {8},
  journaltitle = {ACM Sigplan Notices},
  shortjournal = {ACM Sigplan Not.},
  author = {McCarthy, John},
  date = {1978},
  pages = {215--216}
}

@article{sheingold1987microcomputer,
  title = {The microcomputer as a symbolic medium},
  timestamp = {2015-09-02T15:04:07Z},
  journaltitle = {Mirrors of minds: Patterns of experience in educational computing},
  shortjournal = {Mirrors Minds Patterns Exp. Educ. Comput.},
  author = {Sheingold, Karen},
  date = {1987},
  pages = {198--208},
  file = {Sheingold_1987_The_microcomputer_as_a_symbolic_medium.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/JXV3RETC/Sheingold_1987_The_microcomputer_as_a_symbolic_medium.pdf:application/pdf}
}

@article{salomon1990cognitive,
  title = {Cognitive effects with and of computer technology},
  volume = {17},
  timestamp = {2015-09-02T15:04:07Z},
  number = {1},
  journaltitle = {Communication research},
  shortjournal = {Commun. Res.},
  author = {Salomon, Gavriel},
  date = {1990},
  pages = {26--44}
}

@article{turing1936computable,
  title = {On computable numbers, with an application to the {{Entscheidungsproblem}}},
  volume = {58},
  timestamp = {2015-09-02T15:04:07Z},
  number = {345-363},
  journaltitle = {J. of Math},
  shortjournal = {J Math},
  author = {Turing, Alan Mathison},
  date = {1936},
  pages = {5},
  file = {Turing_1936_On_computable_numbers,_with_an_application_to_the_Entscheidungsproblem.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/UQ2K5CTB/Turing_1936_On_computable_numbers,_with_an_application_to_the_Entscheidungsproblem.pdf:application/pdf}
}

@article{4519947,
  title = {The {{Craft}} of {{Programming}}},
  volume = {41},
  issn = {0018-9162},
  doi = {10.1109/MC.2008.167},
  abstract = {Building programs should be made enjoyable for more people.},
  timestamp = {2015-09-02T15:04:07Z},
  number = {5},
  journaltitle = {Computer},
  shortjournal = {Computer},
  author = {Holmes, Neville},
  date = {2008-05},
  pages = {92--91},
  keywords = {Buildings,Calculators,Computer aided manufacturing,computing profession,Data engineering,data processing,Dynamic programming,Keyboards,Machinery,Plugs,Programming,Programming profession,Systems engineering and theory}
}

@article{4640568,
  title = {The {{Education}} of a {{Computer}}},
  volume = {9},
  issn = {0164-1239},
  doi = {10.1109/MAHC.1987.10032},
  abstract = {Originally presented in 1952 at one of the first ACM conferences, this paper was quite visionary for its time. It foresees widespread commercial computer use and symbolic manipulation, for example.},
  timestamp = {2015-09-02T15:04:07Z},
  number = {3},
  journaltitle = {Annals of the History of Computing},
  shortjournal = {Ann. Hist. Comput.},
  author = {Hopper, Grace Murray},
  date = {1987-07},
  pages = {271--281},
  keywords = {Algorithms,Computer aided instruction,Computer languages,Computer science education,Mathematical programming,Programming profession}
}

@article{kim2013paper,
  title = {Paper-and-{{Pencil Programming Strategy}} toward {{Computational Thinking}} for {{Non-Majors}}: {{Design Your Solution}}},
  volume = {49},
  timestamp = {2015-09-02T15:04:07Z},
  number = {4},
  journaltitle = {Journal of Educational Computing Research},
  shortjournal = {J. Educ. Comput. Res.},
  author = {Kim, Byeongsu and Kim, Taehun and Kim, Jonghoon},
  date = {2013},
  pages = {437--459}
}

@article{clements_teaching_1995,
  title = {Teaching creativity with computers},
  volume = {7},
  issn = {1040-726X},
  url = {http://dx.doi.org/10.1007/BF02212491},
  doi = {10.1007/BF02212491},
  timestamp = {2015-09-02T15:04:07Z},
  langid = {english},
  number = {2},
  journaltitle = {Educational Psychology Review},
  shortjournal = {Educ. Psychol. Rev.},
  author = {Clements, DouglasH.},
  date = {1995-06},
  pages = {141--161},
  keywords = {computers,Creativity,divergent production,Logo},
  file = {Clements_1995_Teaching_creativity_with_computers.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/M3SFDVS4/Clements_1995_Teaching_creativity_with_computers.pdf:application/pdf}
}

@article{6733220,
  title = {From {{Computational Thinking}} to {{AI Thinking}} {[}{{A}} letter from the editor]},
  volume = {28},
  issn = {1541-1672},
  doi = {10.1109/MIS.2013.141},
  abstract = {How can the AI community set about promoting a better understanding of AI's accomplishments and greater awareness of its potential across multiple disciplines?},
  timestamp = {2015-09-02T15:04:07Z},
  number = {6},
  journaltitle = {Intelligent Systems, IEEE},
  shortjournal = {Intell. Syst. IEEE},
  author = {Zeng, Daniel},
  date = {2013-11},
  pages = {2--4},
  keywords = {AI,AI thinking,artificial intelligence,computational thinking,foundation of learning,intelligent systems}
}

@article{blikstein2014programming,
  title = {Programming pluralism: {{Using}} learning analytics to detect patterns in the learning of computer programming},
  volume = {23},
  timestamp = {2015-09-02T15:04:07Z},
  number = {4},
  journaltitle = {Journal of the Learning Sciences},
  shortjournal = {J. Learn. Sci.},
  author = {Blikstein, Paulo and Worsley, Marcelo and Piech, Chris and Sahami, Mehran and Cooper, Steven and Koller, Daphne},
  date = {2014},
  pages = {561--599}
}

@inproceedings{deitrick_using_2015,
  title = {Using {{Distributed Cognition Theory}} to {{Analyze Collaborative Computer Science Learning}}},
  isbn = {978-1-4503-3630-7},
  url = {http://dl.acm.org/citation.cfm?doid=2787622.2787715},
  doi = {10.1145/2787622.2787715},
  timestamp = {2015-09-02T15:04:07Z},
  langid = {english},
  publisher = {{ACM Press}},
  author = {Deitrick, Elise and Shapiro, R. Benjamin and Ahrens, Matthew P. and Fiebrink, Rebecca and Lehrman, Paul D. and Farooq, Saad},
  urldate = {2015-09-02},
  date = {2015},
  pages = {51--60}
}

@article{berland_using_2013,
  title = {Using {{Learning Analytics}} to {{Understand}} the {{Learning Pathways}} of {{Novice Programmers}}},
  volume = {22},
  issn = {1050-8406, 1532-7809},
  url = {http://www.tandfonline.com/doi/abs/10.1080/10508406.2013.836655},
  doi = {10.1080/10508406.2013.836655},
  timestamp = {2015-09-02T15:04:07Z},
  langid = {english},
  number = {4},
  journaltitle = {Journal of the Learning Sciences},
  shortjournal = {J. Learn. Sci.},
  author = {Berland, Matthew and Martin, Taylor and Benton, Tom and Petrick Smith, Carmen and Davis, Don},
  urldate = {2015-09-02},
  date = {2013-10},
  pages = {564--599},
  keywords = {understand}
}

@article{worsley_analyzing_2014,
  title = {Analyzing {{Engineering Design}} through the {{Lens}} of {{Computation}}},
  volume = {1},
  rights = {Copyright (c)},
  issn = {1929-7750},
  url = {http://epress.lib.uts.edu.au/journals/index.php/JLA/article/view/3541},
  abstract = {Learning analytics and educational data mining are introducing a number of new techniques and frameworks for studying learning. The scalability and complexity of these novel techniques has afforded new ways for enacting education research and has helped scholars gain new insights into human cognition and learning. Nonetheless, there remain some domains for which pure computational analysis is currently infeasible. One such area, which is particularly important today, is open-ended, hands-on, engineering design tasks. These open-ended tasks are becoming increasingly prevalent in both K–12 and post-secondary learning institutions, as educators are adopting this approach in order to teach students real-world science and engineering skills (e.g., the “Maker Movement”). This paper highlights findings from a combined human–computer analysis of students as they complete a short engineering design task. The study uncovers novel insights and serves to advance the field’s understanding of engineering design patterns. More specifically, this paper uses machine learning on hand-coded video data to identify general patterns in engineering design and develop a fine-grained representation of how experience relates to engineering practices. Finally, the paper concludes with ideas on how the specific findings from this study can be used to improve engineering education and the nascent field of “making” and digital fabrication in education. We also discuss how human–computer collaborative analyses can grow the learning analytics community and make learning analytics more central to education research.},
  timestamp = {2015-09-02T15:04:07Z},
  langid = {english},
  number = {2},
  journaltitle = {Journal of Learning Analytics},
  shortjournal = {J. Learn. Anal.},
  author = {Worsley, Marcelo and Blikstein, Paulo},
  urldate = {2015-09-02},
  date = {2014-08-07},
  pages = {151--186},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/RKP6488A/3541.html:;Worsley+Blikstein_2014_Analyzing_Engineering_Design_through_the_Lens_of_Computation.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XISSXBPK/Worsley+Blikstein_2014_Analyzing_Engineering_Design_through_the_Lens_of_Computation.pdf:application/pdf}
}

@article{wolber_democratizing_2015,
  title = {Democratizing {{Computing}} with {{APP Inventor}}},
  volume = {18},
  issn = {15591662},
  url = {http://dl.acm.org/citation.cfm?doid=2721914.2721935},
  doi = {10.1145/2721914.2721935},
  timestamp = {2015-09-02T15:04:07Z},
  langid = {english},
  number = {4},
  journaltitle = {ACM SIGMOBILE Mobile Computing and Communications Review},
  shortjournal = {ACM SIGMOBILE Mob. Comput. Commun. Rev.},
  author = {Wolber, David and Abelson, Harold and Friedman, Mark},
  urldate = {2015-09-02},
  date = {2015-01-13},
  pages = {53--58},
  keywords = {empowerment}
}

@online{_teach_2015,
  title = {Teach {{Yourself Programming}} in {{Ten Years}}},
  url = {http://www.norvig.com/21-days.html},
  timestamp = {2015-10-27T03:37:08Z},
  urldate = {2015-09-02},
  date = {2015},
  file = {Teach Yourself Programming in Ten Years:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/P2K984GI/21-days.html:}
}

@article{clements_effects_1984,
  title = {Effects of computer programming on young children's cognition.},
  volume = {76},
  url = {http://psycnet.apa.org/journals/edu/76/6/1051/},
  timestamp = {2015-09-05T21:52:50Z},
  number = {6},
  journaltitle = {Journal of Educational Psychology},
  shortjournal = {J. Educ. Psychol.},
  author = {Clements, Douglas H. and Gullo, Dominic F.},
  urldate = {2015-09-05},
  date = {1984},
  pages = {1051},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/UUU32V3S/1051.html:}
}

@article{pea1984cognitive,
  title = {On the cognitive effects of learning computer programming},
  volume = {2},
  timestamp = {2015-09-05T21:52:50Z},
  number = {2},
  journaltitle = {New ideas in psychology},
  shortjournal = {New Ideas Psychol.},
  author = {Pea, Roy D and Kurland, D Midian},
  date = {1984},
  pages = {137--168}
}

@article{salomon_transfer_1987,
  title = {Transfer of cognitive skills from programming: {{When}} and how?},
  volume = {3},
  url = {http://jec.sagepub.com/content/3/2/149.short},
  shorttitle = {Transfer of cognitive skills from programming},
  timestamp = {2015-09-05T21:52:50Z},
  number = {2},
  journaltitle = {Journal of Educational Computing Research},
  shortjournal = {J. Educ. Comput. Res.},
  author = {Salomon, Gavriel and Perkins, David N.},
  urldate = {2015-09-05},
  date = {1987},
  pages = {149--169},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/BXPNDQKF/149.html:}
}

@article{linn_can_1992,
  title = {Can experts' explanations help students develop program design skills?},
  volume = {36},
  url = {http://www.sciencedirect.com/science/article/pii/0020737392900953},
  timestamp = {2015-09-05T21:52:50Z},
  number = {4},
  journaltitle = {International Journal of Man-Machine Studies},
  shortjournal = {Int. J. Man-Mach. Stud.},
  author = {Linn, Marcia C. and Clancy, Michael J.},
  urldate = {2015-09-05},
  date = {1992},
  pages = {511--551},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/NHRCJ9TU/0020737392900953.html:}
}

@inproceedings{williams_support_2001,
  title = {In support of student pair-programming},
  volume = {33},
  url = {http://dl.acm.org/citation.cfm?id=364614},
  timestamp = {2015-09-05T21:52:50Z},
  booktitle = {{{ACM SIGCSE Bulletin}}},
  publisher = {{ACM}},
  author = {Williams, Laurie and Upchurch, Richard L.},
  urldate = {2015-09-05},
  date = {2001},
  pages = {327--331},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/BW833VME/citation.html:}
}

@article{robins_learning_2003,
  title = {Learning and teaching programming: {{A}} review and discussion},
  volume = {13},
  url = {http://www.tandfonline.com/doi/abs/10.1076/csed.13.2.137.14200},
  shorttitle = {Learning and teaching programming},
  timestamp = {2015-09-05T21:52:50Z},
  number = {2},
  journaltitle = {Computer Science Education},
  shortjournal = {Comput. Sci. Educ.},
  author = {Robins, Anthony and Rountree, Janet and Rountree, Nathan},
  urldate = {2015-09-05},
  date = {2003},
  pages = {137--172},
  keywords = {psychology,psychology of programming},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/6R6FBPD7/csed.13.2.137.html:;Robins_et_al_2003_Learning_and_teaching_programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/I9SC9WZ3/Robins_et_al_2003_Learning_and_teaching_programming.pdf:application/pdf}
}

@article{pears_survey_2007-1,
  title = {A survey of literature on the teaching of introductory programming},
  volume = {39},
  url = {http://dl.acm.org/citation.cfm?id=1345441},
  timestamp = {2015-09-13T16:46:45Z},
  number = {4},
  journaltitle = {ACM SIGCSE Bulletin},
  shortjournal = {ACM SIGCSE Bull.},
  author = {Pears, Arnold and Seidman, Stephen and Malmi, Lauri and Mannila, Linda and Adams, Elizabeth and Bennedsen, Jens and Devlin, Marie and Paterson, James},
  urldate = {2015-09-05},
  date = {2007},
  pages = {204--223},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/C4D46EZQ/citation.html:;Pears_et_al_2007_A_survey_of_literature_on_the_teaching_of_introductory_programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/N2N3BNC3/Pears_et_al_2007_A_survey_of_literature_on_the_teaching_of_introductory_programming.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/SQWWCCEP/citation.html:}
}

@inproceedings{vihavainen_extreme_2011,
  title = {Extreme apprenticeship method in teaching programming for beginners},
  url = {http://dl.acm.org/citation.cfm?id=1953196},
  timestamp = {2015-09-05T21:52:50Z},
  booktitle = {Proceedings of the 42nd {{ACM}} technical symposium on {{Computer}} science education},
  publisher = {{ACM}},
  author = {Vihavainen, Arto and Paksula, Matti and Luukkainen, Matti},
  urldate = {2015-09-05},
  date = {2011},
  pages = {93--98},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/2Z2IUIKC/citation.html:}
}

@article{anderson_learning_1984,
  title = {Learning to program in {{LISP}}},
  volume = {8},
  url = {http://www.sciencedirect.com/science/article/pii/S0364021384800130},
  timestamp = {2015-09-08T19:25:16Z},
  number = {2},
  journaltitle = {Cognitive Science},
  shortjournal = {Cogn. Sci.},
  author = {Anderson, John R. and Farrell, Robert and Sauers, Ron},
  urldate = {2015-09-06},
  date = {1984},
  pages = {87--129},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/C2HT6PS5/S0364021384800130.html:}
}

@article{duboulay_difficulties_1986,
  title = {Some difficulties of learning to program},
  volume = {2},
  url = {http://jec.sagepub.com/content/2/1/57.short},
  timestamp = {2015-09-08T19:25:16Z},
  number = {1},
  journaltitle = {Journal of Educational Computing Research},
  shortjournal = {J. Educ. Comput. Res.},
  author = {Du Boulay, Benedict},
  urldate = {2015-09-06},
  date = {1986},
  pages = {57--73},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/QGRGA282/57.html:}
}

@article{soloway_learning_1986,
  title = {Learning to program= learning to construct mechanisms and explanations},
  volume = {29},
  url = {http://dl.acm.org/citation.cfm?id=6594},
  timestamp = {2016-01-30T23:18:19Z},
  number = {9},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  author = {Soloway, Elliot},
  urldate = {2015-09-06},
  date = {1986},
  pages = {850--858},
  file = {Soloway_1986_Learning_to_program=_learning_to_construct_mechanisms_and_explanations.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/S3E3MKG6/Soloway_1986_Learning_to_program=_learning_to_construct_mechanisms_and_explanations.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/VZCPSPTP/citation.html:}
}

@article{palumbo_programming_1990,
  title = {Programming language/problem-solving research: {{A}} review of relevant issues},
  volume = {60},
  url = {http://rer.sagepub.com/content/60/1/65.short},
  shorttitle = {Programming language/problem-solving research},
  timestamp = {2015-09-08T19:25:16Z},
  number = {1},
  journaltitle = {Review of educational research},
  shortjournal = {Rev. Educ. Res.},
  author = {Palumbo, David B.},
  urldate = {2015-09-08},
  date = {1990},
  pages = {65--89},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/6QVZQK87/65.html:;Palumbo_1990_Programming_language-problem-solving_research.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/7B4FQ43U/Palumbo_1990_Programming_language-problem-solving_research.pdf:application/pdf}
}

@book{booth_learning_1992,
  title = {Learning to program: {{A}} phenomenographic perspective},
  url = {https://gupea.ub.gu.se/handle/2077/16224},
  shorttitle = {Learning to program},
  timestamp = {2015-09-08T19:25:16Z},
  author = {Booth, Shirley},
  urldate = {2015-09-06},
  date = {1992},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PS5PNPE4/16224.html:}
}

@incollection{clark_facilitating_1992,
  title = {Facilitating domain-general problem solving: {{Computers}}, cognitive processes and instruction},
  url = {http://link.springer.com/chapter/10.1007/978-3-642-77228-3_13},
  shorttitle = {Facilitating domain-general problem solving},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Computer-based learning environments and problem solving},
  publisher = {{Springer}},
  author = {Clark, Richard E.},
  urldate = {2015-09-08},
  date = {1992},
  pages = {265--285},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CMK677TV/978-3-642-77228-3_13.html:}
}

@incollection{decorte_cognitive_1992,
  title = {Cognitive effects of learning to program in {{Logo}}: {{A}} one-year study with sixth graders},
  url = {http://link.springer.com/chapter/10.1007/978-3-642-77228-3_10},
  shorttitle = {Cognitive effects of learning to program in {{Logo}}},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Computer-based learning environments and problem solving},
  publisher = {{Springer}},
  author = {De Corte, Erik and Verschaffel, Lieven and Schrooten, Hilde},
  urldate = {2015-09-08},
  date = {1992},
  pages = {207--228},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/NZZRC45K/978-3-642-77228-3_10.html:}
}

@incollection{mayer_teaching_1992,
  title = {Teaching for transfer of problem-solving skills to computer programming},
  url = {http://link.springer.com/chapter/10.1007/978-3-642-77228-3_9},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Computer-based learning environments and problem solving},
  publisher = {{Springer}},
  author = {Mayer, Richard E.},
  urldate = {2015-09-08},
  date = {1992},
  pages = {193--206},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/8JTXDWV8/978-3-642-77228-3_9.html:}
}

@article{mevarech_how_1992,
  title = {How and how much can cooperative logo environments enhance creativity and social relationships?},
  volume = {2},
  url = {http://www.sciencedirect.com/science/article/pii/095947529290012B},
  timestamp = {2015-09-08T19:25:16Z},
  number = {3},
  journaltitle = {Learning and instruction},
  shortjournal = {Learn. Instr.},
  author = {Mevarech, Zemira R. and Kramarski, Bracha},
  urldate = {2015-09-08},
  date = {1992},
  pages = {259--274},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/X6FA64QK/095947529290012B.html:}
}

@article{norris_effect_1992,
  title = {The effect of computer science instruction on critical thinking skills and mental alertness},
  volume = {24},
  url = {http://www.tandfonline.com/doi/abs/10.1080/08886504.1992.10782014},
  timestamp = {2015-09-08T19:25:16Z},
  number = {3},
  journaltitle = {Journal of Research on Computing in Education},
  shortjournal = {J. Res. Comput. Educ.},
  author = {Norris, Cathleen and Jackson, Larry and Poirot, James},
  urldate = {2015-09-08},
  date = {1992},
  pages = {329--337},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/JPA264XI/08886504.1992.html:}
}

@article{reed_effect_1992,
  title = {The effect of {{BASIC}} instruction on problem solving skills over an extended period of time},
  volume = {8},
  url = {http://jec.sagepub.com/content/8/3/311.short},
  timestamp = {2015-09-08T19:25:16Z},
  number = {3},
  journaltitle = {Journal of Educational Computing Research},
  shortjournal = {J. Educ. Comput. Res.},
  author = {Reed, W. Michael and Palumbo, David B.},
  urldate = {2015-09-08},
  date = {1992},
  pages = {311--325},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/NDWAJIKJ/311.html:}
}

@article{scott_computers_1992,
  title = {Computers and education: {{A}} cultural constructivist perspective},
  shorttitle = {Computers and education},
  timestamp = {2015-09-08T19:25:16Z},
  eprinttype = {jstor},
  eprint = {1167300},
  journaltitle = {Review of research in education},
  shortjournal = {Rev. Res. Educ.},
  author = {Scott, Tony and Cole, Michael and Engel, Martin},
  date = {1992},
  pages = {191--251}
}

@article{bangert-drowns_word_1993,
  title = {The word processor as an instructional tool: {{A}} meta-analysis of word processing in writing instruction},
  volume = {63},
  url = {http://rer.sagepub.com/content/63/1/69.short},
  shorttitle = {The word processor as an instructional tool},
  timestamp = {2015-09-08T19:25:16Z},
  number = {1},
  journaltitle = {Review of Educational research},
  shortjournal = {Rev. Educ. Res.},
  author = {Bangert-Drowns, Robert L.},
  urldate = {2015-09-08},
  date = {1993},
  pages = {69--93},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/4RT69KDM/69.html:}
}

@article{beard_transfer_1993,
  title = {Transfer of computer skills from introductory computer courses},
  volume = {25},
  url = {http://www.tandfonline.com/doi/abs/10.1080/08886504.1993.10782062},
  timestamp = {2015-09-08T19:25:16Z},
  number = {4},
  journaltitle = {Journal of research on computing in education},
  shortjournal = {J. Res. Comput. Educ.},
  author = {Beard, Charles H.},
  urldate = {2015-09-08},
  date = {1993},
  pages = {413--430},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/W2484BJ3/08886504.1993.html:}
}

@article{choi_effects_1993,
  title = {Effects of {{Pascal}} and {{FORTRAN}} programming on the problem-solving abilities of college students},
  volume = {25},
  url = {http://www.tandfonline.com/doi/abs/10.1080/08886504.1993.10782052},
  timestamp = {2015-09-08T19:25:16Z},
  number = {3},
  journaltitle = {Journal of research on computing in Education},
  shortjournal = {J. Res. Comput. Educ.},
  author = {Choi, Won Sik and Repman, Judi},
  urldate = {2015-09-08},
  date = {1993},
  pages = {290--302},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/ID2PH27B/08886504.1993.html:}
}

@article{ennis_combining_1994,
  title = {Combining problem-solving instruction and programming instruction to increase the problem-solving ability of high school students},
  volume = {26},
  url = {http://www.tandfonline.com/doi/abs/10.1080/08886504.1994.10782105},
  timestamp = {2015-09-08T19:25:16Z},
  number = {4},
  journaltitle = {Journal of Research on Computing in Education},
  shortjournal = {J. Res. Comput. Educ.},
  author = {Ennis, Demetria L.},
  urldate = {2015-09-08},
  date = {1994},
  pages = {488--496},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IRRD8W7E/08886504.1994.html:}
}

@article{guzdial_softwarerealized_1994,
  title = {Software-realized scaffolding to facilitate programming for science learning},
  volume = {4},
  url = {http://www.tandfonline.com/doi/abs/10.1080/1049482940040101},
  timestamp = {2015-09-08T19:25:16Z},
  number = {1},
  journaltitle = {Interactive Learning Environments},
  shortjournal = {Interact. Learn. Environ.},
  author = {Guzdial, Mark},
  urldate = {2015-09-08},
  date = {1994},
  pages = {001--044},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/6URJGZW4/1049482940040101.html:}
}

@article{kramarski_cognitivemetacognitive_1997,
  title = {Cognitive-metacognitive training within a problem-solving based {{Logo}} environment},
  volume = {67},
  url = {http://onlinelibrary.wiley.com/doi/10.1111/j.2044-8279.1997.tb01256.x/abstract},
  timestamp = {2015-09-08T19:25:16Z},
  number = {4},
  journaltitle = {British Journal of Educational Psychology},
  shortjournal = {Br. J. Educ. Psychol.},
  author = {Kramarski, Bracha and Mevarech, Zemira R.},
  urldate = {2015-09-08},
  date = {1997},
  pages = {425--445},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PG5AQTTQ/abstract.html:}
}

@article{stein_what_1998,
  title = {What we've swept under the rug: {{Radically}} rethinking {{CS1}}},
  volume = {8},
  url = {http://cogprints.org/543/},
  shorttitle = {What we've swept under the rug},
  timestamp = {2015-09-08T19:25:16Z},
  number = {2},
  journaltitle = {Computer Science Education},
  shortjournal = {Comput. Sci. Educ.},
  author = {Stein, Lynn Andrea},
  urldate = {2015-09-08},
  date = {1998},
  pages = {118--129},
  file = {[HTML] from cogprints.org:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/A9P688PK/rug.html:;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/D7RQQKU2/543.html:}
}

@article{foshay_principles_2003,
  title = {Principles for teaching problem solving},
  volume = {4},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.200.3382&rep=rep1&type=pdf},
  timestamp = {2015-09-08T19:25:16Z},
  journaltitle = {Technical Paper},
  shortjournal = {Tech. Pap.},
  author = {Foshay, Rob and Kirkley, Jamie},
  urldate = {2015-09-08},
  date = {2003}
}

@article{kirkley_principles_2003,
  title = {Principles of teaching problem solving: technical paper 4},
  url = {http://elibrary.kiu.ac.ug:8080/jspui/handle/1/1460},
  shorttitle = {Principles of teaching problem solving},
  timestamp = {2015-09-08T19:25:16Z},
  author = {Kirkley, Jamie},
  urldate = {2015-09-08},
  date = {2003}
}

@article{forte_motivation_2005,
  title = {Motivation and nonmajors in computer science: identifying discrete audiences for introductory courses},
  volume = {48},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1427874},
  shorttitle = {Motivation and nonmajors in computer science},
  timestamp = {2015-09-08T19:25:16Z},
  number = {2},
  journaltitle = {Education, IEEE Transactions on},
  shortjournal = {Educ. IEEE Trans. On},
  author = {Forte, Andrea and Guzdial, Mark},
  urldate = {2015-09-08},
  date = {2005},
  pages = {248--253},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/5B8W2QXP/abs_all.html:;Forte+Guzdial_2005_Motivation_and_nonmajors_in_computer_science.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/EPZ92KTT/Forte+Guzdial_2005_Motivation_and_nonmajors_in_computer_science.pdf:application/pdf}
}

@inproceedings{grandell_high_2005,
  title = {High school programming—a beyond-syntax analysis of novice programmers’ difficulties},
  url = {http://www.kolicalling.fi/old_cms/archive/2005/koli_proc_2005.pdf#page=24},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Proceedings of the {{Koli Calling}} 2005 {{Conference}} on {{Computer Science Education}}},
  author = {Grandell, Linda and Peltomäki, Mia and Salakoski, Tapio},
  urldate = {2015-09-08},
  date = {2005},
  pages = {17--24}
}

@inproceedings{guzdial_design_2005,
  title = {Design process for a non-majors computing course},
  volume = {37},
  url = {http://dl.acm.org/citation.cfm?id=1047468},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {{{ACM SIGCSE Bulletin}}},
  publisher = {{ACM}},
  author = {Guzdial, Mark and Forte, Andrea},
  urldate = {2015-09-08},
  date = {2005},
  pages = {361--365},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/J8XGJBKE/citation.html:}
}

@inproceedings{schulte_what_2006,
  title = {What do teachers teach in introductory programming?},
  url = {http://dl.acm.org/citation.cfm?id=1151593},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Proceedings of the second international workshop on {{Computing}} education research},
  publisher = {{ACM}},
  author = {Schulte, Carsten and Bennedsen, Jens},
  urldate = {2015-09-08},
  date = {2006},
  pages = {17--28},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/4IH9CV6M/citation.html:;Schulte+Bennedsen_2006_What_do_teachers_teach_in_introductory_programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XCE38NDI/Schulte+Bennedsen_2006_What_do_teachers_teach_in_introductory_programming.pdf:application/pdf}
}

@inproceedings{caspersen_instructional_2007,
  title = {Instructional design of a programming course: a learning theoretic approach},
  url = {http://dl.acm.org/citation.cfm?id=1288595},
  shorttitle = {Instructional design of a programming course},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Proceedings of the third international workshop on {{Computing}} education research},
  publisher = {{ACM}},
  author = {Caspersen, Michael E. and Bennedsen, Jens},
  urldate = {2015-09-08},
  date = {2007},
  pages = {111--122},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/99QVIX7K/citation.html:}
}

@inproceedings{gray_suggestions_2007,
  title = {Suggestions for graduated exposure to programming concepts using fading worked examples},
  url = {http://dl.acm.org/citation.cfm?id=1288594},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Proceedings of the third international workshop on {{Computing}} education research},
  publisher = {{ACM}},
  author = {Gray, Simon and St Clair, Caroline and James, Richard and Mead, Jerry},
  urldate = {2015-09-08},
  date = {2007},
  pages = {99--110},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/R5WJZ44X/citation.html:}
}

@article{pears_survey_2007,
  title = {A survey of literature on the teaching of introductory programming},
  volume = {39},
  url = {http://dl.acm.org/citation.cfm?id=1345441},
  timestamp = {2015-10-25T21:06:39Z},
  number = {4},
  journaltitle = {ACM SIGCSE Bulletin},
  shortjournal = {ACM SIGCSE Bull.},
  author = {Pears, Arnold and Seidman, Stephen and Malmi, Lauri and Mannila, Linda and Adams, Elizabeth and Bennedsen, Jens and Devlin, Marie and Paterson, James},
  urldate = {2015-09-08},
  date = {2007},
  pages = {204--223}
}

@article{hundhausen_can_2009,
  title = {Can direct manipulation lower the barriers to computer programming and promote transfer of training?: {{An}} experimental study},
  volume = {16},
  url = {http://dl.acm.org/citation.cfm?id=1592442},
  shorttitle = {Can direct manipulation lower the barriers to computer programming and promote transfer of training?},
  timestamp = {2015-09-08T19:25:16Z},
  number = {3},
  journaltitle = {ACM Transactions on Computer-Human Interaction (TOCHI)},
  shortjournal = {ACM Trans. Comput.-Hum. Interact. TOCHI},
  author = {Hundhausen, Christopher D. and Farley, Sean F. and Brown, Jonathan L.},
  urldate = {2015-09-08},
  date = {2009},
  pages = {13},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/G9EKCJXV/citation.html:}
}

@article{pears_enhancing_2010,
  title = {Enhancing student engagement in an introductory programming course},
  url = {http://www.computer.org/csdl/proceedings/fie/2010/6261/00/05673334-abs.html},
  timestamp = {2015-09-08T19:25:16Z},
  author = {Pears, Arnold N.},
  urldate = {2015-09-08},
  date = {2010},
  file = {Pears_2010_Enhancing_student_engagement_in_an_introductory_programming_course.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/C59K5MCR/Pears_2010_Enhancing_student_engagement_in_an_introductory_programming_course.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/R8SK568S/05673334-abs.html:}
}

@book{dann_learning_2011,
  title = {Learning to {{Program}} with {{Alice}} (w/{{CD ROM}})},
  url = {http://dl.acm.org/citation.cfm?id=2011893},
  timestamp = {2015-09-08T19:25:16Z},
  publisher = {{Prentice Hall Press}},
  author = {Dann, Wanda P. and Cooper, Stephen and Pausch, Randy},
  urldate = {2015-09-06},
  date = {2011},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XEVIE6R8/citation.html:}
}

@article{apiola_new_2012,
  title = {New perspectives on the pedagogy of programming in a developing country context},
  volume = {22},
  url = {http://www.tandfonline.com/doi/abs/10.1080/08993408.2012.726871},
  timestamp = {2015-09-08T19:25:16Z},
  number = {3},
  journaltitle = {Computer Science Education},
  shortjournal = {Comput. Sci. Educ.},
  author = {Apiola, Mikko and Tedre, Matti},
  urldate = {2015-09-08},
  date = {2012},
  pages = {285--313},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/NDIQFRMA/08993408.2012.html:}
}

@inproceedings{burke_writers_2012,
  title = {The writers' workshop for youth programmers: digital storytelling with scratch in middle school classrooms},
  url = {http://dl.acm.org/citation.cfm?id=2157264},
  shorttitle = {The writers' workshop for youth programmers},
  timestamp = {2015-09-08T19:25:16Z},
  booktitle = {Proceedings of the 43rd {{ACM}} technical symposium on {{Computer Science Education}}},
  publisher = {{ACM}},
  author = {Burke, Quinn and Kafai, Yasmin B.},
  urldate = {2015-09-08},
  date = {2012},
  pages = {433--438},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/43K8AS37/citation.html:}
}

@article{koulouri_teaching_2014,
  title = {Teaching introductory programming: a quantitative evaluation of different approaches},
  volume = {14},
  url = {http://dl.acm.org/citation.cfm?id=2662412},
  shorttitle = {Teaching introductory programming},
  timestamp = {2015-09-08T19:25:16Z},
  number = {4},
  journaltitle = {ACM Transactions on Computing Education (TOCE)},
  shortjournal = {ACM Trans. Comput. Educ. TOCE},
  author = {Koulouri, Theodora and Lauria, Stanislao and Macredie, Robert D.},
  urldate = {2015-09-08},
  date = {2014},
  pages = {26},
  file = {Koulouri_et_al_2014_Teaching_introductory_programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CF7MDSQI/Koulouri_et_al_2014_Teaching_introductory_programming.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/UUHN63QN/citation.html:}
}

@article{rolandsson_programming_2014,
  title = {Programming in school: {{Look}} back to move forward},
  volume = {14},
  url = {http://dl.acm.org/citation.cfm?id=2602487},
  shorttitle = {Programming in school},
  timestamp = {2016-01-28T04:35:18Z},
  number = {2},
  journaltitle = {ACM Transactions on Computing Education (TOCE)},
  shortjournal = {ACM Trans. Comput. Educ. TOCE},
  author = {Rolandsson, Lennart and Skogh, Inga-Britt},
  urldate = {2015-09-08},
  date = {2014},
  pages = {12},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/HZN7AMSK/citation.html:;Rolandsson+Skogh_2014_Programming_in_school.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/KBKW4U9M/Rolandsson+Skogh_2014_Programming_in_school.pdf:application/pdf}
}

@inproceedings{downey_designing_2006,
  title = {Designing a small-footprint curriculum in computer science},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4117160},
  timestamp = {2015-09-08T21:00:18Z},
  booktitle = {Frontiers in {{Education Conference}}, 36th {{Annual}}},
  publisher = {{IEEE}},
  author = {Downey, Allen B. and Stein, Lynn Andrea},
  urldate = {2015-09-08},
  date = {2006},
  pages = {21--26},
  file = {Downey+Stein_2006_Designing_a_small-footprint_curriculum_in_computer_science.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/RX9XNUTF/Downey+Stein_2006_Designing_a_small-footprint_curriculum_in_computer_science.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/WMURZ7SD/abs_all.html:}
}

@article{stein_challenging_1999,
  title = {Challenging the computational metaphor: {{Implications}} for how we think},
  volume = {30},
  url = {http://www.tandfonline.com/doi/abs/10.1080/019697299125073},
  shorttitle = {Challenging the computational metaphor},
  timestamp = {2015-09-08T21:06:42Z},
  number = {6},
  journaltitle = {Cybernetics \& Systems},
  shortjournal = {Cybern. Syst.},
  author = {Stein, Lynn Andrea},
  urldate = {2015-09-08},
  date = {1999},
  pages = {473--507},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IR7RTJKH/019697299125073.html:;Stein_1999_Challenging_the_computational_metaphor.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XUN2TMTJ/Stein_1999_Challenging_the_computational_metaphor.pdf:application/pdf}
}

@article{isbell_re_2010,
  title = {({{Re}}) defining computing curricula by (re) defining computing},
  volume = {41},
  url = {http://dl.acm.org/citation.cfm?id=1709462},
  timestamp = {2015-09-08T21:07:09Z},
  number = {4},
  journaltitle = {ACM SIGCSE Bulletin},
  shortjournal = {ACM SIGCSE Bull.},
  author = {Isbell, Charles L. and Stein, Lynn Andrea and Cutler, Robb and Forbes, Jeffrey and Fraser, Linda and Impagliazzo, John and Proulx, Viera and Russ, Steve and Thomas, Richard and Xu, Yan},
  urldate = {2015-09-08},
  date = {2010},
  pages = {195--207},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IPRVTBDN/citation.html:;Isbell_et_al_2010_(Re)_defining_computing_curricula_by_(re)_defining_computing.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/ZD26GRVE/Isbell_et_al_2010_(Re)_defining_computing_curricula_by_(re)_defining_computing.pdf:application/pdf}
}

@article{somerville_olin_2005,
  title = {The {{Olin}} curriculum: {{Thinking}} toward the future},
  volume = {48},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1393122},
  shorttitle = {The {{Olin}} curriculum},
  timestamp = {2015-09-08T21:08:32Z},
  number = {1},
  journaltitle = {Education, IEEE Transactions on},
  shortjournal = {Educ. IEEE Trans. On},
  author = {Somerville, Mark and Anderson, David and Berbeco, Hillary and Bourne, John R. and Crisman, Jill and Dabby, Diana and Donis-Keller, Helen and Holt, Stephen S. and Kerns, Sherra and Kerns Jr, David V. and {others}},
  urldate = {2015-09-08},
  date = {2005},
  pages = {198--205},
  file = {Somerville_et_al_2005_The_Olin_curriculum.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CMD66ADP/Somerville_et_al_2005_The_Olin_curriculum.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PET6857Z/abs_all.html:}
}

@incollection{stein_interaction_2006,
  title = {Interaction, computation, and education},
  url = {http://link.springer.com/content/pdf/10.1007/3-540-34874-3_18.pdf},
  timestamp = {2015-09-08T21:09:56Z},
  booktitle = {Interactive {{Computation}}},
  publisher = {{Springer}},
  author = {Stein, Lynn Andrea},
  urldate = {2015-09-08},
  date = {2006},
  pages = {463--484},
  file = {Stein_2006_Interaction,_computation,_and_education.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PSJJZF86/Stein_2006_Interaction,_computation,_and_education.pdf:application/pdf}
}

@article{kay_personal_1977,
  title = {Personal dynamic media},
  volume = {10},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1646405},
  timestamp = {2015-09-10T19:05:30Z},
  number = {3},
  journaltitle = {Computer},
  shortjournal = {Computer},
  author = {Kay, Alan and Goldberg, Adina},
  urldate = {2015-09-10},
  date = {1977},
  pages = {31--41},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/HJG8JGNI/abs_all.html:}
}

@inproceedings{kay_microelectronics_1977,
  title = {Microelectronics and the personal computer},
  url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.151.4723},
  timestamp = {2015-09-10T19:05:30Z},
  booktitle = {Scientific {{American}}},
  publisher = {{Citeseer}},
  author = {Kay, Alan},
  urldate = {2015-09-10},
  date = {1977},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/P9ME7QQJ/summary.html:}
}

@article{kay_user_1990,
  title = {User interface: {{A}} personal view},
  url = {http://ui.korea.ac.kr/Board/Upload/a%20personal%20view_n.pdf},
  shorttitle = {User interface},
  timestamp = {2015-09-10T19:05:30Z},
  journaltitle = {The art of human-computer interface design},
  shortjournal = {Art Hum.-Comput. Interface Des.},
  author = {Kay, Alan},
  urldate = {2015-09-10},
  date = {1990},
  pages = {191--207},
  file = {Kay_1990_User_interface.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/A82VESGN/Kay_1990_User_interface.pdf:application/pdf}
}

@inproceedings{ingalls_back_1997,
  title = {Back to the future: the story of {{Squeak}}, a practical {{Smalltalk}} written in itself},
  volume = {32},
  url = {http://dl.acm.org/citation.cfm?id=263754},
  shorttitle = {Back to the future},
  timestamp = {2015-09-10T19:05:30Z},
  booktitle = {{{ACM SIGPLAN Notices}}},
  publisher = {{ACM}},
  author = {Ingalls, Dan and Kaehler, Ted and Maloney, John and Wallace, Scott and Kay, Alan},
  urldate = {2015-09-10},
  date = {1997},
  pages = {318--326},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/JTJKAFD5/citation.html:}
}

@article{trontl_problem_2010-1,
  title = {Problem of computer programming education for technical engineers},
  volume = {18},
  url = {http://onlinelibrary.wiley.com/doi/10.1002/cae.20187/abstract},
  timestamp = {2015-09-14T16:42:43Z},
  number = {1},
  journaltitle = {Computer Applications in Engineering Education},
  shortjournal = {Comput. Appl. Eng. Educ.},
  author = {Trontl, Kresimir},
  urldate = {2015-09-14},
  date = {2010},
  pages = {200--202},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/B6XQ2RUF/abstract.html:;Trontl_2010_Problem_of_computer_programming_education_for_technical_engineers.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/GUK58EG4/Trontl_2010_Problem_of_computer_programming_education_for_technical_engineers.pdf:application/pdf}
}

@article{linn_designing_1995,
  title = {Designing computer learning environments for engineering and computer science: {{The}} scaffolded knowledge integration framework},
  volume = {4},
  url = {http://link.springer.com/article/10.1007/BF02214052},
  shorttitle = {Designing computer learning environments for engineering and computer science},
  timestamp = {2015-09-14T16:47:55Z},
  number = {2},
  journaltitle = {Journal of Science Education and Technology},
  shortjournal = {J. Sci. Educ. Technol.},
  author = {Linn, Marcia C.},
  urldate = {2015-09-14},
  date = {1995},
  pages = {103--126},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/6DU4IEDM/BF02214052.html:;Linn_1995_Designing_computer_learning_environments_for_engineering_and_computer_science.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/DDBCT3VD/Linn_1995_Designing_computer_learning_environments_for_engineering_and_computer_science.pdf:application/pdf}
}

@article{kolling_problem_1999,
  title = {The problem of teaching object-oriented programming},
  volume = {11},
  url = {http://core.ac.uk/download/pdf/62989.pdf},
  timestamp = {2016-01-25T19:59:36Z},
  number = {8},
  journaltitle = {Journal of Object Oriented Programming},
  shortjournal = {J. Object Oriented Program.},
  author = {Kölling, Michael},
  urldate = {2015-09-14},
  date = {1999},
  pages = {8--15},
  keywords = {criteria for a teaching language,OOP},
  file = {Kölling_1999_The_problem_of_teaching_object-oriented_programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/E9Q3DF6H/Kölling_1999_The_problem_of_teaching_object-oriented_programming.pdf:application/pdf}
}

@report{atwood_cognitive_1978,
  title = {Cognitive {{Structures}} in the {{Comprehension}} and {{Memory}} of {{Computer Programs}}: {{An Investigation}} of {{Computer Program Debugging}}},
  rights = {Approved for public release; distribution is unlimited.},
  shorttitle = {Cognitive {{Structures}} in the {{Comprehension}} and {{Memory}} of {{Computer Programs}}},
  timestamp = {2015-10-25T21:06:39Z},
  langid = {english},
  author = {Atwood, Michael E. and Ramsey, H. Rudy},
  date = {1978-08},
  keywords = {*COMPUTER PROGRAMMING,*DEBUGGING(COMPUTERS),COGNITIVE PSYCHOLOGY,Computer Programming and Software,COMPUTER PROGRAMS,EDITING,INFORMATION PROCESSING,MEMORY(PSYCHOLOGY),PE62725A,PROBLEM SOLVING,PROGRAMMERS,PSYCHOLOGY},
  file = {DTIC Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/5I6XW5NT/oai.html:}
}

@article{sheil_psychological_1981,
  title = {The {{Psychological Study}} of {{Programming}}},
  volume = {13},
  issn = {0360-0300},
  url = {http://doi.acm.org/10.1145/356835.356840},
  doi = {10.1145/356835.356840},
  timestamp = {2015-10-25T21:06:39Z},
  number = {1},
  journaltitle = {ACM Comput. Surv.},
  shortjournal = {ACM Comput Surv},
  author = {Sheil, B. A.},
  urldate = {2015-10-13},
  date = {1981-03},
  pages = {101--120},
  file = {Sheil_1981_The_Psychological_Study_of_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/WG4BWGPH/Sheil_1981_The_Psychological_Study_of_Programming.pdf:application/pdf}
}

@inproceedings{weinstein_teaching_1983,
  title = {The teaching of learning strategies.},
  volume = {5},
  url = {http://eric.ed.gov/?id=ED237180},
  doi = {123},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {Innovation {{Abstracts}}},
  publisher = {{ERIC}},
  author = {Weinstein, Claire E. and Mayer, Richard E.},
  urldate = {2015-09-16},
  date = {1983},
  pages = {n32},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/UQXQHGS4/eric.ed.gov.html:}
}

@article{dalbey_demands_1985,
  title = {The demands and requirements of computer programming: {{A}} literature review},
  volume = {1},
  url = {http://jec.sagepub.com/content/1/3/253.short},
  shorttitle = {The demands and requirements of computer programming},
  timestamp = {2015-10-25T21:06:39Z},
  number = {3},
  journaltitle = {Journal of Educational Computing Research},
  shortjournal = {J. Educ. Comput. Res.},
  author = {Dalbey, John and Linn, Marcia C.},
  urldate = {2015-10-16},
  date = {1985},
  pages = {253--274},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/25XPUVVX/253.html:}
}

@article{dijkstra_debate_1989,
  title = {A debate on teaching computing science},
  volume = {32},
  url = {http://ing2-2009.googlecode.com/svn-history/r116/trunk/clase_dijkstra/A_debate_on_teaching_Computer_Science.pdf},
  timestamp = {2015-10-25T21:06:39Z},
  number = {12},
  journaltitle = {Commun. ACM},
  shortjournal = {Commun ACM},
  author = {Dijkstra, E. and Denning, P. J. and PARNAS, DL and SCHERLIS, WL and EMDEN, MHV and Cohen, J. and HAMMING, RW and KARP, RM and WINOGRAD, T.},
  urldate = {2015-09-15},
  date = {1989},
  pages = {1397--1414}
}

@article{dalton_effects_1991,
  title = {The {{Effects}} of {{Computer Programming}} on {{Problem-Solving Skills}} and {{Attitudes}}},
  volume = {7},
  issn = {0735-6331, 1541-4140},
  url = {http://jec.sagepub.com/content/7/4/483},
  doi = {10.2190/762V-KV6T-D3D1-KDY2},
  abstract = {This study examined the effects of systematic computer programming and problem-solving instruction on problem-solving skills and attitudes. Two hundred seventy-two elementary and junior high students were exposed to one of four computer programming and problem-solving treatments for a period of twenty weeks. Elementary students received programming instruction in Logo, while junior high students studied BASIC. Results indicated that computer programming alone was ineffective in teaching problem solving. However, when paired with systematic problem-solving instruction, learners demonstrated significant learning gains.},
  timestamp = {2015-10-25T21:06:39Z},
  langid = {english},
  number = {4},
  journaltitle = {Journal of Educational Computing Research},
  shortjournal = {Journal of Educational Computing Research},
  author = {Dalton, David W. and Goodrum, David A.},
  urldate = {2015-10-16},
  date = {1991-11-01},
  pages = {483--506},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/A444X98M/483.html:}
}

@article{oman_programming_1991,
  title = {A programming style taxonomy},
  volume = {15},
  issn = {0164-1212},
  url = {http://www.sciencedirect.com/science/article/pii/0164121291900447},
  doi = {10.1016/0164-1212(91)90044-7},
  abstract = {Programming style guidelines, style analyzers, and code formatters have been developed without a solid empirical or theoretical basis. In this paper we provide: (1) a justification for developing a programming style taxonomy, (2) an operational style taxonomy, (3) example applications of the taxonomy illustrating the diverse and sometimes contradictory nature of programming style guidelines, and (4) a discussion on how the taxonomy can be used to further teaching and research in programming style. The taxonomy provides a context for understanding and identifying specific style factors and empirical studies necessary to determine the effects of style on program comprehension. The results of this paper have a direct impact on programming instruction, programming standards, automated style analyzers, and code formatting tools like pretty-printers and syntax-directed editors.},
  timestamp = {2015-10-25T21:06:39Z},
  number = {3},
  journaltitle = {Journal of Systems and Software},
  shortjournal = {Journal of Systems and Software},
  author = {Oman, Paul W. and Cook, Curtis R.},
  urldate = {2015-10-15},
  date = {1991-07-01},
  pages = {287--301},
  file = {ScienceDirect Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PXG6RTDB/0164121291900447.html:}
}

@article{knuth_literate_1992,
  title = {Literate programming},
  volume = {1},
  url = {http://adsabs.harvard.edu/abs/1992lipr.book.....K},
  timestamp = {2015-10-25T21:06:39Z},
  journaltitle = {CSLI Lecture Notes, Stanford, CA: Center for the Study of Language and Information (CSLI), 1992},
  shortjournal = {CSLI Lect. Notes Stanf. CA Cent. Study Lang. Inf. CSLI 1992},
  author = {Knuth, Donald E.},
  urldate = {2015-10-16},
  date = {1992},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/P8FI2UMQ/1992lipr.book.....html:}
}

@inproceedings{east_patternbased_1996,
  title = {Pattern-based programming instruction},
  url = {http://faculty.chas.uni.edu/~wallingf/patterns/papers/asee96.pdf},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {Proceedings of the {{ASEE Annual Conference}} and {{Exposition}}, {{Washington DC}}},
  author = {East, J. Philip and Thomas, S. Rebecca and Wallingford, Eugene and Beck, Walter and Drake, Janet},
  urldate = {2015-10-12},
  date = {1996},
  file = {East_et_al_1996_Pattern-based_programming_instruction.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/GANI72RP/East_et_al_1996_Pattern-based_programming_instruction.pdf:application/pdf}
}

@book{nardi_context_1996,
  title = {Context and consciousness: activity theory and human-computer interaction},
  url = {https://books.google.com/books?hl=en&lr=&id=JeqcgPlS2UAC&oi=fnd&pg=PR7&dq=Context+and+Consciousness:+Activity+Theory&ots=e_eeXzyZCy&sig=77022D5k7b1hXtiq-B07OMQelQA},
  shorttitle = {Context and consciousness},
  timestamp = {2015-10-25T21:06:39Z},
  publisher = {{Mit Press}},
  author = {Nardi, Bonnie A.},
  urldate = {2015-10-20},
  date = {1996},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/88V8M59P/books.html:}
}

@article{cockburn_costs_2000,
  title = {The costs and benefits of pair programming},
  url = {http://www.cs.pomona.edu/~markk/cs121.f07/supp/williams_prpgm.pdf},
  timestamp = {2015-10-25T21:06:39Z},
  journaltitle = {Extreme programming examined},
  shortjournal = {Extreme Program. Examined},
  author = {Cockburn, Alistair and Williams, Laurie},
  urldate = {2015-10-16},
  date = {2000},
  pages = {223--247},
  file = {Cockburn+Williams_2000_The_costs_and_benefits_of_pair_programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/C4UI47HZ/Cockburn+Williams_2000_The_costs_and_benefits_of_pair_programming.pdf:application/pdf}
}

@article{williams_strengthening_2000,
  title = {Strengthening the case for pair programming},
  url = {http://www.computer.org/csdl/mags/so/2000/04/s4019.pdf},
  timestamp = {2015-10-25T21:06:39Z},
  number = {4},
  journaltitle = {IEEE software},
  shortjournal = {IEEE Softw.},
  author = {Williams, Laurie and Kessler, Robert R. and Cunningham, Ward and Jeffries, Ron},
  urldate = {2015-10-16},
  date = {2000},
  pages = {19--25},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IS3ESV97/s4019.html:}
}

@article{ben-ari_constructivism_2001,
  title = {Constructivism in computer science education},
  volume = {20},
  url = {http://www.editlib.org/p/8505/},
  timestamp = {2015-10-25T21:06:39Z},
  number = {1},
  journaltitle = {Journal of Computers in Mathematics and Science Teaching},
  shortjournal = {J. Comput. Math. Sci. Teach.},
  author = {Ben-Ari, Mordechai},
  urldate = {2015-10-16},
  date = {2001},
  pages = {45--73},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/35RXQ26M/8505.html:}
}

@article{mccracken_multinational_2001,
  title = {A {{Multi}}-national, {{Multi}}-institutional {{Study}} of {{Assessment}} of {{Programming Skills}} of {{First}}-year {{CS Students}}},
  volume = {33},
  issn = {0097-8418},
  url = {http://doi.acm.org/10.1145/572139.572181},
  doi = {10.1145/572139.572181},
  abstract = {In computer science, an expected outcome of a student's education is programming skill. This working group investigated the programming competency students have as they complete their first one or two courses in computer science. In order to explore options for assessing students, the working group developed a trial assessment of whether students can program. The underlying goal of this work was to initiate dialog in the Computer Science community on how to develop these types of assessments. Several universities participated in our trial assessment and the disappointing results suggest that many students do not know how to program at the conclusion of their introductory courses. For a combined sample of 216 students from four universities, the average score was 22.89 out of 110 points on the general evaluation criteria developed for this study. From this trial assessment we developed a framework of expectations for first-year courses and suggestions for further work to develop more comprehensive assessments.},
  timestamp = {2016-01-20T22:31:06Z},
  number = {4},
  journaltitle = {SIGCSE Bull.},
  shortjournal = {SIGCSE Bull},
  author = {McCracken, Michael and Almstrum, Vicki and Diaz, Danny and Guzdial, Mark and Hagan, Dianne and Kolikant, Yifat Ben-David and Laxer, Cary and Thomas, Lynda and Utting, Ian and Wilusz, Tadeusz},
  urldate = {2015-10-15},
  date = {2001-12},
  pages = {125--180},
  file = {McCracken_et_al_2001_A_multi-national,_multi-institutional_study_of_assessment_of_programming_skills.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/R6TGUNV9/McCracken_et_al_2001_A_multi-national,_multi-institutional_study_of_assessment_of_programming_skills.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/T66RDCBN/citation.html:}
}

@inproceedings{mcdowell_effects_2002,
  title = {The effects of pair-programming on performance in an introductory programming course},
  volume = {34},
  url = {http://dl.acm.org/citation.cfm?id=563353},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {{{ACM SIGCSE Bulletin}}},
  publisher = {{ACM}},
  author = {McDowell, Charlie and Werner, Linda and Bullock, Heather and Fernald, Julian},
  urldate = {2015-10-16},
  date = {2002},
  pages = {38--42},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/W6XIPTGZ/citation.html:}
}

@book{raymond_art_2003,
  title = {The art of {{Unix}} programming},
  url = {https://books.google.com/books?hl=en&lr=&id=H4q1t-jAcBIC&oi=fnd&pg=PR9&dq=art+of+unix+programming&ots=-e2yGwye8v&sig=bYndL8dCrlT_tM5gdHW8TVync9A},
  timestamp = {2016-01-26T18:15:35Z},
  publisher = {{Addison-Wesley Professional}},
  author = {Raymond, Eric S.},
  urldate = {2015-10-16},
  date = {2003},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/D3D26WP4/books.html:;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/V8ZSQCGD/books.html:}
}

@inproceedings{muller_almost_2004,
  title = {({{An}} almost) pedagogical pattern for pattern-based problem-solving instruction},
  volume = {36},
  url = {http://dl.acm.org/citation.cfm?id=1008025},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {{{ACM SIGCSE Bulletin}}},
  publisher = {{ACM}},
  author = {Muller, Orna and Haberman, Bruria and Averbuch, Haim},
  urldate = {2015-10-12},
  date = {2004},
  pages = {102--106},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/2WUMD5A8/citation.html:;Muller_et_al_2004_(An_almost)_pedagogical_pattern_for_pattern-based_problem-solving_instruction.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/Q4UC5VFI/Muller_et_al_2004_(An_almost)_pedagogical_pattern_for_pattern-based_problem-solving_instruction.pdf:application/pdf}
}

@inproceedings{sitthiworachart_effective_2004,
  title = {Effective peer assessment for learning computer programming},
  volume = {36},
  url = {http://dl.acm.org/citation.cfm?id=1008030},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {{{ACM SIGCSE Bulletin}}},
  publisher = {{ACM}},
  author = {Sitthiworachart, Jirarat and Joy, Mike},
  urldate = {2015-10-16},
  date = {2004},
  pages = {122--126},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/W4F3G4RH/citation.html:}
}

@inproceedings{muller_pattern_2005,
  title = {Pattern oriented instruction and the enhancement of analogical reasoning},
  url = {http://dl.acm.org/citation.cfm?id=1089792},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {Proceedings of the first international workshop on {{Computing}} education research},
  publisher = {{ACM}},
  author = {Muller, Orna},
  urldate = {2015-10-12},
  date = {2005},
  pages = {57--67},
  file = {Muller_2005_Pattern_oriented_instruction_and_the_enhancement_of_analogical_reasoning.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IAX7AQP7/Muller_2005_Pattern_oriented_instruction_and_the_enhancement_of_analogical_reasoning.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/RJI84VM5/citation.html:}
}

@article{mcdowell_pair_2006,
  title = {Pair programming improves student retention, confidence, and program quality},
  volume = {49},
  url = {http://dl.acm.org/citation.cfm?id=1145293},
  timestamp = {2015-10-25T21:06:39Z},
  number = {8},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  author = {McDowell, Charlie and Werner, Linda and Bullock, Heather E. and Fernald, Julian},
  urldate = {2015-10-16},
  date = {2006},
  pages = {90--95},
  keywords = {broader impacts},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/R2E42IC5/citation.html:}
}

@inproceedings{chong_social_2007,
  title = {The {{Social Dynamics}} of {{Pair Programming}}},
  doi = {10.1109/ICSE.2007.87},
  abstract = {This paper presents data from a four month ethnographic study of professional pair programmers from two software development teams. Contrary to the current conception of pair programmers, the pairs in this study did not hew to the separate roles of "driver" and "navigator". Instead, the observed programmers moved together through different phases of the task, considering and discussing issues at the same strategic "range " or level of abstraction and in largely the same role. This form of interaction was reinforced by frequent switches in keyboard control during pairing and the use of dual keyboards. The distribution of expertise among the members of a pair had a strong influence on the tenor of pair programming interaction. Keyboard control had a consistent secondary effect on decisionmaking within the pair. These findings have implications for software development managers and practitioners as well as for the design of software development tools.},
  eventtitle = {29th International Conference on Software Engineering, 2007. ICSE 2007},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {29th {{International Conference}} on {{Software Engineering}}, 2007. {{ICSE}} 2007},
  author = {Chong, Jan and Hurlbutt, T.},
  date = {2007-05},
  pages = {354--363},
  keywords = {Computer science,Data engineering,decision making,Dynamic programming,Engineering management,Human computer interaction,keyboard control,Keyboards,Navigation,pair programming,Programming profession,social aspects of automation,social dynamics,software development,software development management,Technology management},
  file = {IEEE Xplore Abstract Record:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/RZWJ4IP2/abs_all.html:}
}

@inproceedings{muller_patternoriented_2007,
  title = {Pattern-oriented instruction and its influence on problem decomposition and solution construction},
  volume = {39},
  url = {http://dl.acm.org/citation.cfm?id=1268830},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {{{ACM SIGCSE Bulletin}}},
  publisher = {{ACM}},
  author = {Muller, Orna and Ginat, David and Haberman, Bruria},
  urldate = {2015-10-12},
  date = {2007},
  pages = {151--155},
  file = {Muller_et_al_2007_Pattern-oriented_instruction_and_its_influence_on_problem_decomposition_and.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/2B5D5F76/Muller_et_al_2007_Pattern-oriented_instruction_and_its_influence_on_problem_decomposition_and.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/QFRXTCCR/citation.html:}
}

@article{blikstein_travels_2008,
  title = {Travels in {{Troy}} with {{Freire}}: {{Technology}} as an agent for emancipation},
  timestamp = {2015-10-25T21:06:39Z},
  journaltitle = {Paulo Freire: The possible dream. Rotterdam, Netherlands: Sense},
  shortjournal = {Paulo Freire Possible Dream Rotterdam Neth. Sense},
  author = {Blikstein, Paulo},
  date = {2008},
  keywords = {liberation,toread}
}

@article{muller_supporting_2008,
  title = {Supporting abstraction processes in problem solving through pattern-oriented instruction},
  volume = {18},
  issn = {0899-3408},
  url = {http://www.tandfonline.com/doi/abs/10.1080/08993400802332548},
  doi = {10.1080/08993400802332548},
  abstract = {ion is a major concept in computer science and serves as a powerful tool in software development. Pattern-oriented instruction (POI) is a pedagogical approach that incorporates patterns in an introductory computer science course in order to structure the learning of algorithmic problem solving. This paper examines abstraction processes in the course of solving an algorithmic problem and highlights three distinct, although interrelated, facets of abstraction: pattern recognition, black-boxing, and structure identification. A study that examined the influence of the POI approach on students' abstraction skills is described; students who learned according to the POI approach were compared with students who learned in a traditional manner with regard to analogical reasoning and problem decomposition and solution, as well as verbal expression. The three facets of abstraction were used to analyze students' abstraction skills and their competency in algorithmic problem solving.},
  timestamp = {2015-10-25T21:06:39Z},
  number = {3},
  journaltitle = {Computer Science Education},
  shortjournal = {Comput. Sci. Educ.},
  author = {Muller, Orna and Haberman, Bruria},
  urldate = {2015-10-16},
  date = {2008-09-01},
  pages = {187--212},
  file = {Muller+Haberman_2008_Supporting_abstraction_processes_in_problem_solving_through_pattern-oriented.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/J7WBWHGK/Muller+Haberman_2008_Supporting_abstraction_processes_in_problem_solving_through_pattern-oriented.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/MC5A984X/08993400802332548.html:}
}

@article{mccartney_liminal_2009,
  title = {Liminal spaces and learning computing},
  volume = {34},
  issn = {0304-3797},
  url = {http://dx.doi.org/10.1080/03043790902989580},
  doi = {10.1080/03043790902989580},
  abstract = {‘Threshold concepts’ are concepts that, among other things, transform the way a student looks at a discipline. Although the term ‘threshold’ might suggest that the transformation occurs at a specific point in time, an ‘aha’ moment, it seems more common (at least in computing) that a longer time period is required. This time period is referred to as the ‘liminal space’. In this paper, we summarise our findings concerning how computing students experience the liminal space and discuss how this might affect teaching. Most of our findings so far relate to software engineering. As it is likely that similar liminal spaces occur in other engineering disciplines, these findings have relevance across engineering education.},
  timestamp = {2015-10-25T21:06:39Z},
  number = {4},
  journaltitle = {European Journal of Engineering Education},
  shortjournal = {Eur. J. Eng. Educ.},
  author = {McCartney, Robert and Boustedt, Jonas and Eckerdal, Anna and Moström, Jan Erik and Sanders, Kate and Thomas, Lynda and Zander, Carol},
  urldate = {2015-10-16},
  date = {2009-08-01},
  pages = {383--391},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IIXZR7HA/03043790902989580.html:}
}

@article{sancho-thomas_learning_2009,
  title = {Learning teamwork skills in university programming courses},
  volume = {53},
  issn = {0360-1315},
  url = {http://www.sciencedirect.com/science/article/pii/S0360131509000797},
  doi = {10.1016/j.compedu.2009.03.010},
  abstract = {University courses about computer programming usually seek to provide students not only with technical knowledge, but also with the skills required to work in real-life software projects. Nowadays, the development of software applications requires the coordinated efforts of the members of one or more teams. Therefore, it is important for software professionals to master the sort of skills that assure the success of teamwork, such as communication, leadership, negotiation, or team management. However, these abilities are difficult to teach, one of the reasons being that they require true commitment from the students. However, today students are taking a more and more passive role in their own education, two of the more evident consequences being the increase in dropout rates and the decrease in marks obtained in exams. The NUCLEO e-learning framework has been designed to promote the effective acquisition of teamwork skills and, at the same time, to promote the more active participation of the students in their own learning process. NUCLEO adopts a socio-constructivist pedagogical approach that pursues the development of communities of practice for Problem Based Learning. Our research has rooted the design decisions of NUCLEO in the analysis of its socio-cultural environment with Activity Theory, which considers conflicts within groups as the impetus of their evolution and the forges of their environments. This paper presents the analysis of the main features of NUCLEO according to Activity Theory, as well as the experimental results obtained with the framework in three different case studies in university courses.},
  timestamp = {2015-10-25T21:06:39Z},
  number = {2},
  journaltitle = {Computers \& Education},
  shortjournal = {Computers \& Education},
  author = {Sancho-Thomas, Pilar and Fuentes-Fernández, Rubén and Fernández-Manjón, Baltasar},
  urldate = {2015-10-13},
  date = {2009-09},
  pages = {517--531},
  keywords = {Cooperative/collaborative learning,Learning communities,Post-secondary education,Teaching/learning strategies},
  file = {ScienceDirect Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/5Q7SCB3P/S0360131509000797.html:}
}

@inproceedings{walle_personality_2009,
  title = {Personality and the nature of collaboration in pair programming},
  doi = {10.1109/ESEM.2009.5315996},
  abstract = {The benefits of synergistic collaboration are at the heart of arguments in favor of pair programming. However, empirical studies usually investigate direct effects of various factors on pair programming performance without looking into the details of collaboration. This paper reports from an empirical study that (1) investigated the nature of pair programming collaboration, and (2) subsequently investigated postulated effects of personality on pair programming collaboration. Audio recordings of 44 professional programmer pairs were categorized according to a taxonomy of collaboration. We then measured postulated relationships between the collaboration categories and the personality of the individuals in the pairs. We found evidence that personality generally affects the type of collaboration that occurs in pairs, and that different levels of a given personality trait between two pair members increases the amount of communication-intensive collaboration exhibited by a pair.},
  eventtitle = {3rd International Symposium on Empirical Software Engineering and Measurement, 2009. ESEM 2009},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {3rd {{International Symposium}} on {{Empirical Software Engineering}} and {{Measurement}}, 2009. {{ESEM}} 2009},
  author = {Walle, T. and Hannay, J.E.},
  date = {2009-10},
  pages = {203--213},
  keywords = {Audio recording,collaboration taxonomy,Collaborative software,Collaborative work,Dynamic programming,groupware,International collaboration,Laboratories,pair programming collaboration,Programming profession,software engineering,Software measurement,software performance evaluation,synergistic collaboration,Taxonomy},
  file = {IEEE Xplore Abstract Record:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/5E8SJ4D4/abs_all.html:}
}

@article{goel_novel_2010,
  title = {A {{Novel Approach}} for {{Collaborative Pair Programming}}},
  volume = {9},
  issn = {15393585},
  url = {http://login.ezproxy.lib.vt.edu/login?url=http://search.ebscohost.com/login.aspx?direct=true&db=ehh&AN=60636431&scope=site},
  abstract = {The majority of an engineer's time in the software industry is spent working with other programmers. Agile methods of software development like eXtreme Programming strongly rely upon practices like daily meetings and pair programming. Hence, the need to learn the skill of working collaboratively is of primary importance for software developers. During computing education, this may be particularly important for the stronger students as they may be the ones who least desire to work with other programmers. Further, programmers need to develop the ability to comprehend the programs developed by others and, also, to write programs that can be easily comprehended by other programmers. Increasing dependence on large amounts of Free and Open Source Software (FOSS) makes this even more crucial. Until a decade ago, one weakness in the typical undergraduate experience was the failure to train students to work with other programmers -- in fact it was often considered a form of cheating. Over time, researchers have the need to find a way to allow students to work together within clearly defined boundaries that would be an acceptable practice. A traditional form of pair programming based on the driver-navigator model has been successful in many introductory computer science courses. Its success is noticeable in better performance in computer science assignments, increased team work in and outside class, enhanced learning, and decreased frustration (Cliburn, 2003; Domino, Collins, \& Hevner, 2007; McDowell, Werner, Bullock, \& Fernald, 2002; Nagappan et al., 2003;Sfetsos, Stamelos, Angelis, \& Deligiannis, 2009; Thomas, Ratcliffe, \& Robertson, 2003; VanDeGrift, 2004; Williams \& Kessler, 2003; Williams, Yang, Wiebe, Ferzli, \& Miller, 2002). However, pair programming has its weaknesses too (Bevan, Werner, \& McDowell, 2002, Cliburn, 2003; VanDeGrift, 2004). Most of the experiments have the shortcoming of not having been able to create a convincing need for collaboration. Such a situation results in students sitting together, sharing a machine, but not actually collaborating with each other The objective of this paper is to propose a new framework for implementing pair programming in the classroom. Our model of collaborative pair programming is based on Dillenbourg's set of four conditions to set up an active collaborative context. We have transformed the traditional form of pair first work independently and then work on a combined task that brings together their individual tasks. The framework has been experimented within a real classroom environment for the course 'Introduction to Computer Programming' offered to first year engineering students. All the inexperienced programmers were allowed to form pairs, while all the experienced students worked as solo programmers. This was done primarily to compare the performance of experienced versus inexperienced programmers at the end of the course. This comparison helped identify if such an implementation of collaborative pair programming proved advantageous for students. The experiment was well monitored and regulated by four instructors and teaching assistants at any given time. Observations throughout the five months of the course and results from various examinations and feedback mechanisms showed that such a framework for collaborative pair programming enhanced problem solving skills, improved quality of work, and increased trust and teamwork. Final examination results for inexperienced programmers showed a marked increase in their performance when compared to results of experienced programmers. In conclusion, the new framework proved successful by helping inexperienced programmers perform at par with their experienced peers.},
  timestamp = {2015-10-25T21:06:39Z},
  journaltitle = {Journal of Information Technology Education},
  shortjournal = {Journal of Information Technology Education},
  author = {Goel, Sanjay and Kathuria, Vanshi},
  urldate = {2015-10-19},
  date = {2010-01},
  pages = {183--196},
  keywords = {COMPUTER programmers,COMPUTER programming,Computer science,COMPUTER software development,INFORMATION technology}
}

@inproceedings{lu_integration_2010,
  title = {Integration {{Of Real World Teaming Into A Programming Course}}},
  url = {https://peer.asee.org/integration-of-real-world-teaming-into-a-programming-course},
  eventtitle = {2010 Annual Conference \& Exposition},
  timestamp = {2015-10-25T21:06:39Z},
  author = {Lu, Yung-Hsiang and Brown, Cordelia},
  urldate = {2015-10-23},
  date = {2010-06-20},
  pages = {15.785.1--15.785.8},
  keywords = {teamwork},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/ZCRVTE2N/integration-of-real-world-teaming-into-a-programming-course.html:}
}

@article{salleh_empirical_2011,
  title = {Empirical {{Studies}} of {{Pair Programming}} for {{CS}}/{{SE Teaching}} in {{Higher Education}}: {{A Systematic Literature Review}}},
  volume = {37},
  issn = {0098-5589},
  doi = {10.1109/TSE.2010.59},
  shorttitle = {Empirical {{Studies}} of {{Pair Programming}} for {{CS}}/{{SE Teaching}} in {{Higher Education}}},
  abstract = {The objective of this paper is to present the current evidence relative to the effectiveness of pair programming (PP) as a pedagogical tool in higher education CS/SE courses. We performed a systematic literature review (SLR) of empirical studies that investigated factors affecting the effectiveness of PP for CS/SE students and studies that measured the effectiveness of PP for CS/SE students. Seventy-four papers were used in our synthesis of evidence, and 14 compatibility factors that can potentially affect PP's effectiveness as a pedagogical tool were identified. Results showed that students' skill level was the factor that affected PP's effectiveness the most. The most common measure used to gauge PP's effectiveness was time spent on programming. In addition, students' satisfaction when using PP was overall higher than when working solo. Our meta-analyses showed that PP was effective in improving students' grades on assignments. Finally, in the studies that used quality as a measure of effectiveness, the number of test cases succeeded, academic performance, and expert opinion were the quality measures mostly applied. The results of this SLR show two clear gaps in this research field: 1) a lack of studies focusing on pair compatibility factors aimed at making PP an effective pedagogical tool and 2) a lack of studies investigating PP for software design/modeling tasks in conjunction with programming tasks.},
  timestamp = {2015-10-25T21:06:39Z},
  number = {4},
  journaltitle = {IEEE Transactions on Software Engineering},
  shortjournal = {IEEE Trans. Softw. Eng.},
  author = {Salleh, N. and Mendes, E. and Grundy, John},
  date = {2011-07},
  pages = {509--525},
  keywords = {Algorithm design and analysis,Collaborative work,Computer science,CS/SE teaching,Education,Educational programs,educational technology,Empirical studies,further education,higher education,lit review,pair programming,Performance evaluation,PP,Programming profession,Software design,software prototyping,systematic literature review,systematic review.,teaching,Testing,Time measurement},
  file = {IEEE Xplore Abstract Record:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/TXNWRVQC/abs_all.html:}
}

@article{faria_methodology_2012,
  title = {A {{Methodology}} for {{Computer Programming Teaching Based}} on {{Bloom}}'s {{Taxonomy}} of {{Educational Objectives}} and {{Apllied Through}} the {{Pair Programming}}},
  volume = {10},
  issn = {1548-0992},
  doi = {10.1109/TLA.2012.6187603},
  abstract = {It is believed, it's more and more difficult to find professionals of the skilled branch of software development in techniques of computers programming. What seemingly is more and more well-known in computation courses and similar it is the high disapproval index and escape in programming disciplines. The reasons are several. The present work was developed in the intention of proposing the use of collaborative practices in the programming teaching in those disciplines. A methodology was developed for programming teaching and nominated as (eXtreme Learning of Programming - XLP). The methodology XLP is based on an agile methodology of software development known as it eXtreme Programming (XP). To justify the use of the methodology, it's defends that the use of the pair programming contributes for the increase of the students' retention in computation courses and similar through the motivation, of the sense of responsibility and of the proportionate change of knowledge for the socio-cognitive conflict due to the pairs.},
  timestamp = {2015-10-28T03:58:52Z},
  number = {2},
  journaltitle = {Latin America Transactions, IEEE (Revista IEEE America Latina)},
  shortjournal = {Lat. Am. Trans. IEEE Rev. IEEE Am. Lat.},
  author = {Faria, E.S.J. and Yamanaka, K. and Tavares, J.A.},
  date = {2012-03},
  pages = {1589--1594},
  keywords = {agile methodology,Bloom's Taxonomy of Educational Objectives,Computational modeling,computation courses,computer science education,computers programming,Education,eXtreme Learning of Programming,eXtreme Programming,Hardware,high disapproval index,Navigation,pair programming,programming disciplines,programming learning,Programming profession,programming teaching,socio-cognitive conflict,Software,software development,software prototyping,XLP},
  file = {IEEE Xplore Abstract Record:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/KQA4GIRP/abs_all.html:}
}

@article{p_students_2012,
  title = {Student's {{Opinion}} on {{Adopting Pair Programming}} as a {{Teaching}} and {{Learning Tool}}},
  volume = {60},
  rights = {Copyright Foundation of Computer Science 2012},
  issn = {09758887},
  url = {http://search.proquest.com.ezproxy.lib.vt.edu/docview/1240472338/abstract},
  doi = {http://dx.doi.org.ezproxy.lib.vt.edu/10.5120/9679-4106},
  abstract = {Research in the realm of Pair Programming in computer science students has begun to explore the methods for accomplishing the benefits. However, valid measurements of the opinion on adopting a pair programming in the practical sessions are required to be drawn, before concluding. An Attitude Survey Test (AST) was conducted before implementing Pair Programming as a teaching and learning tool among computer science students in Pondicherry Engineering College. The purpose of this investigation is to examine the student's opinion on four vital issues viz. i) General Perception about pair programming; ii) Personality conflicts among pair; iii) Relevant examination system and iv) Female student's attitude. We have engaged 154 B. Tech and MCA students as participants from Pondicherry Engineering College, for the AST, each answered a set of questions relating to Pair Programming. By accurately assessing the students' opinions, our AST results indicated the adequate convergent validity of scores obtained, that there is a room for implementing pair programming as a teaching and learning tool in laboratory course works.},
  timestamp = {2015-10-25T21:06:39Z},
  langid = {english},
  number = {4},
  journaltitle = {International Journal of Computer Applications},
  shortjournal = {Int. J. Comput. Appl.},
  author = {P, Radhakrishnan and S, Kanmani},
  urldate = {2015-10-19},
  date = {2012},
  keywords = {Computers}
}

@article{salleh_investigating_2012,
  title = {Investigating the effects of personality traits on pair programming in a higher education setting through a family of experiments},
  volume = {19},
  issn = {1382-3256, 1573-7616},
  url = {http://link.springer.com.ezproxy.lib.vt.edu/article/10.1007/s10664-012-9238-4},
  doi = {10.1007/s10664-012-9238-4},
  abstract = {Evidence from our systematic literature review revealed numerous inconsistencies in findings from the Pair Programming (PP) literature regarding the effects of personality on PP’s effectiveness as a pedagogical tool. In particular: i) the effect of differing personality traits of pairs on the successful implementation of pair-programming (PP) within a higher education setting is still unclear, and ii) the personality instrument most often used had been Myers-Briggs Type Indicator (MBTI), despite being an indicator criticized by personality psychologists as unreliable in measuring an individual’s personality traits. These issues motivated the research described in this paper. We conducted a series of five formal experiments (one of which was a replicated experiment), between 2009 and 2010, at the University of Auckland, to investigate the effects of personality composition on PP’s effectiveness. Each experiment looked at a particular personality trait of the Five-Factor personality framework. This framework comprises five broad traits (Openness to experience, Conscientiousness, Extraversion, Agreeableness, and Neuroticism), and our experiments focused on three of these - Conscientiousness, Neuroticism, and Openness. A total of 594 undergraduate students participated as subjects. Overall, our findings for all five experiments, including the replication, showed that Conscientiousness and Neuroticism did not present a statistically significant effect upon paired students’ academic performance. However, Openness played a significant role in differentiating paired students’ academic performance. Participants’ survey results also indicated that PP not only caused an increase in satisfaction and confidence levels but also brought enjoyment to the tutorial classes and enhanced students’ motivation.},
  timestamp = {2015-10-25T21:06:39Z},
  langid = {english},
  number = {3},
  journaltitle = {Empirical Software Engineering},
  shortjournal = {Empir Software Eng},
  author = {Salleh, Norsaremah and Mendes, Emilia and Grundy, John},
  urldate = {2015-10-19},
  date = {2012-12-08},
  pages = {714--752},
  keywords = {Five-factor model,Formal experiment,higher education,pair programming,Personality traits,Programming Languages; Compilers; Interpreters,Software Engineering/Programming and Operating Systems},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/9X7MKGCM/10.html:}
}

@inproceedings{rolandsson_changing_2013,
  title = {Changing {{Computer Programming Education}}: {{The Dinosaur That Survived}} in {{School}}: {{An Explorative Study}} about {{Educational Issues Based}} on {{Teachers}}' {{Beliefs}} and {{Curriculum Development}} in {{Secondary School}}},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6542265},
  shorttitle = {Changing {{Computer Programming Education}}},
  timestamp = {2015-10-25T21:06:39Z},
  booktitle = {Learning and {{Teaching}} in {{Computing}} and {{Engineering}} ({{LaTiCE}}), 2013},
  publisher = {{IEEE}},
  author = {Rolandsson, Lennart},
  urldate = {2015-10-12},
  date = {2013},
  pages = {220--223},
  keywords = {lit review,pedagogy},
  file = {Rolandsson_2013_Changing_Computer_Programming_Education.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/3CK9AT4G/Rolandsson_2013_Changing_Computer_Programming_Education.pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/4B83QFBE/cookiedetectresponse.html:;[HTML] from diva-portal.org:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/B6T9TV6Q/record.html:}
}

@article{pears_values_2009,
  title = {Values and {{Objectives}} in {{Computing Education Research}}},
  volume = {9},
  issn = {1946-6226},
  url = {http://doi.acm.org/10.1145/1594399.1594400},
  doi = {10.1145/1594399.1594400},
  abstract = {What is Computing Education Research (CER), why are we doing this type of research, and what should the community achieve? As associate editors to this special edition we provide our perspectives and discuss how they have influenced the evolution of the Koli Calling International Conference on Computing Education Research over the last nine years. The two articles in the special issue have been selected from among the twenty eight conference contributions for their originality and contribution to CER in the areas the Koli Calling Conference aims to emphasize. We hope that you find them inspiring reading.},
  timestamp = {2015-11-11T16:15:30Z},
  number = {3},
  journaltitle = {Trans. Comput. Educ.},
  shortjournal = {Trans Comput Educ},
  author = {Pears, Arnold and Malmi, Lauri},
  urldate = {2015-11-11},
  date = {2009-09},
  pages = {15:1--15:6},
  keywords = {computing education research,Koli Calling 2008,motivations,Perspectives,research agenda}
}

@article{wilkes_software_1976,
  title = {Software {{Engineering}} and {{Structured Programming}}},
  volume = {2},
  rights = {Copyright IEEE Computer Society Jul 1976},
  issn = {00985589},
  url = {http://search.proquest.com/docview/195577957/abstract},
  doi = {http://dx.doi.org/10.1109/TSE.1976.233832},
  abstract = {This paper discusses the requirements of programmers working in varying environments in relation to software engineering, structured programming, and program verification.},
  timestamp = {2016-01-11T18:01:28Z},
  langid = {english},
  number = {4},
  journaltitle = {IEEE Transactions on Software Engineering},
  shortjournal = {IEEE Trans. Softw. Eng.},
  author = {Wilkes, M. V.},
  urldate = {2016-01-11},
  date = {1976-07},
  pages = {274--276},
  keywords = {Computers--Software},
  file = {Wilkes_1976_Software_Engineering_and_Structured_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/UZI5VFE4/Wilkes_1976_Software_Engineering_and_Structured_Programming.pdf:application/pdf}
}

@inproceedings{boyer_impact_2009,
  location = {{New York, NY, USA}},
  title = {The {{Impact}} of {{Instructor Initiative}} on {{Student Learning}}: {{A Tutoring Study}}},
  isbn = {978-1-60558-183-5},
  url = {http://doi.acm.org/10.1145/1508865.1508873},
  doi = {10.1145/1508865.1508873},
  shorttitle = {The {{Impact}} of {{Instructor Initiative}} on {{Student Learning}}},
  abstract = {In the quest to find instructional approaches that benefit student learning, engagement, and retention, evidence suggests providing students with hands-on practice is a worthwhile use of class time. This paper presents results from an exploratory study of two different instructional approaches that were encountered in a study of experienced human tutors working with novice computing students engaged in a programming exercise. No difference in average learning gains was found between a moderate approach, in which students were given control of problem solving nearly half the time, and a proactive approach in which the tutor took initiative nearly three-fourths of the time. Implications of this finding for fine-grained instructional strategy, as well as for broader classroom management decisions, are discussed. This paper also makes the case for the value of one-on-one tutoring studies as an exploratory research methodology for the comparative evaluation of computer science teaching strategies.},
  timestamp = {2016-01-11T20:06:47Z},
  booktitle = {Proceedings of the 40th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '09},
  publisher = {{ACM}},
  author = {Boyer, Kristy Elizabeth and Phillips, Robert and Wallis, Michael D. and Vouk, Mladen A. and Lester, James C.},
  urldate = {2016-01-11},
  date = {2009},
  pages = {14--18},
  keywords = {active learning,computing education research,PROBLEM SOLVING,research study,teaching strategies,tutoring},
  file = {Boyer_et_al_2009_The_Impact_of_Instructor_Initiative_on_Student_Learning.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/3KMJJU8Z/Boyer_et_al_2009_The_Impact_of_Instructor_Initiative_on_Student_Learning.pdf:application/pdf}
}

@inproceedings{khailany_alternative_1977,
  location = {{New York, NY, USA}},
  title = {Alternative {{Teaching Strategy}} for an {{Introductory Computer Language Course}}},
  url = {http://doi.acm.org/10.1145/800104.803366},
  doi = {10.1145/800104.803366},
  abstract = {Many consider that the best strategy to teach an introductory computer language course is to start programming very early in the semester. This paper discusses the drawbacks of such a strategy and presents an alternative way to teach such a course. Based on experiments the alternative strategy appears to be more effective. The advantages and outline of the alternative strategy are discussed. Furthermore, the course outline to teach a FORTRAN language based on the alternative strategy is presented.},
  timestamp = {2016-01-11T20:13:37Z},
  booktitle = {Proceedings of the {{Seventh SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '77},
  publisher = {{ACM}},
  author = {Khailany, Asad},
  urldate = {2016-01-11},
  date = {1977},
  pages = {93--95},
  file = {Khailany_1977_Alternative_Teaching_Strategy_for_an_Introductory_Computer_Language_Course.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/WR69DU7M/Khailany_1977_Alternative_Teaching_Strategy_for_an_Introductory_Computer_Language_Course.pdf:application/pdf}
}

@inproceedings{salgian_teaching_2013,
  location = {{New York, NY, USA}},
  title = {Teaching {{Creativity}} in {{Computer Science}}},
  isbn = {978-1-4503-1868-6},
  url = {http://doi.acm.org/10.1145/2445196.2445238},
  doi = {10.1145/2445196.2445238},
  abstract = {In this paper, we describe how a multidisciplinary undergraduate course in Conducting Robots becomes a venue for fostering creativity and teaching strategies for creativity enhancement. We perform a number of creativity measurements and explain our results in the context of creativity research.},
  timestamp = {2016-01-11T20:14:34Z},
  booktitle = {Proceeding of the 44th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '13},
  publisher = {{ACM}},
  author = {Salgian, Andrea and Nakra, Teresa M. and Ault, Christopher and Wang, Yunfeng},
  urldate = {2016-01-11},
  date = {2013},
  pages = {123--128},
  keywords = {creativity,multidisciplinary,music,orchestral conducting,robotics},
  file = {Salgian_et_al_2013_Teaching_Creativity_in_Computer_Science.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/7QHVUH4H/Salgian_et_al_2013_Teaching_Creativity_in_Computer_Science.pdf:application/pdf}
}

@inproceedings{john_student_2015,
  location = {{New York, NY, USA}},
  title = {Student {{Response}} to {{Teaching}} of {{Memory Cues}} and {{Resumption Strategies}} in {{Computer Science Classes}}},
  isbn = {978-1-4503-2966-8},
  url = {http://doi.acm.org/10.1145/2676723.2677234},
  doi = {10.1145/2676723.2677234},
  abstract = {Programming is a creative process that requires the ability to concentrate and juggle multiple concepts simultaneously in one's mind. Existing research shows there is a tangible cost when a programmer is interrupted as the programmer must recover the context of his work and refocus on the task at hand. However, CS students are rarely taught about interruptions and how to manage them. Instead, teaching tends to focus only on technical concepts. In addition, there is little research on interruptions with respect to CS students. Therefore, our research examines what happens when CS students are taught about interruptions and how to cope with them. The objective of this paper is to determine if CS students are affected by interruptions, what knowledge CS students possess regarding memory cues and resumption strategies, and what their opinion is of this material. We conducted a study with approximately two-hundred undergraduate CS students to answer these questions. Our study was comprised of an initial questionnaire, a seminar on memory cues and resumption strategies, and a follow-up questionnaire. Our results demonstrate that CS students are affected by interruptions, but 73\% of students report not knowing methods to mitigate them. After learning about memory cues and resumption strategies, students report that the material was useful and that they want to study it. Their most significant feedback is that they have a strong desire to include these techniques in CS curriculums, reporting a mean score of 7.78 out of 10, where 0 signifies strong disagreement and 10 signifies strong agreement.},
  timestamp = {2016-01-11T20:16:28Z},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '15},
  publisher = {{ACM}},
  author = {John, Noah and Ruiz, Jaime},
  urldate = {2016-01-11},
  date = {2015},
  pages = {6--11},
  keywords = {cues,interruptions,students,task resumption,teaching},
  file = {John+Ruiz_2015_Student_Response_to_Teaching_of_Memory_Cues_and_Resumption_Strategies_in.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/EAQ7U46M/John+Ruiz_2015_Student_Response_to_Teaching_of_Memory_Cues_and_Resumption_Strategies_in.pdf:application/pdf}
}

@inproceedings{lelewer_seminar_1994,
  location = {{New York, NY, USA}},
  title = {A {{Seminar Course}} in {{Computer Ethics}}},
  isbn = {978-0-89791-646-2},
  url = {http://doi.acm.org/10.1145/191029.191136},
  doi = {10.1145/191029.191136},
  abstract = {This paper describes the transformation of a required Senior Seminar course. The transformed course emphasizes ethical, social, political, legal, and economic aspects of computing. In addition, the new rendition of the course increases the requirement for oral and written communication. We describe the previous definition of the course, goals of the redesign, and students' reactions to both the new and old versions. To this author's surprise, student satisfaction is higher with the new course, although it requires more of them.We discuss course organization, and suggest assignments and teaching strategy. The course was a joy to teach and, fortunately, a very pleasant and meaningful experience for the students.},
  timestamp = {2016-01-11T20:17:42Z},
  booktitle = {Proceedings of the {{Twenty}}-fifth {{SIGCSE Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '94},
  publisher = {{ACM}},
  author = {Lelewer, Debra A.},
  urldate = {2016-01-11},
  date = {1994},
  pages = {253--257},
  file = {Lelewer_1994_A_Seminar_Course_in_Computer_Ethics.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XP7PNXN3/Lelewer_1994_A_Seminar_Course_in_Computer_Ethics.pdf:application/pdf}
}

@inproceedings{manzo_comes_1978,
  location = {{New York, NY, USA}},
  title = {{{COMES}}: {{A CAI System Oriented}} to {{Programming Languages}}},
  url = {http://doi.acm.org/10.1145/990555.990558},
  doi = {10.1145/990555.990558},
  shorttitle = {{{COMES}}},
  abstract = {COMES, a system for computer aided instruction oriented to programming languages, is described here. The system allows a full integration of theory learning and practical applications since it offers two different teaching strategies, one corresponding to a purely tutorial environment and one to a programming and problem-solving environment that has to be specialized for a given programming language. Thus, the learning process can be based on a tight alternation of theory and practice and relies more on personal experience than on memorization of abstract information. The main design choices are discussed in the paper and two examples of dialogues are supplied.},
  timestamp = {2016-01-11T20:18:59Z},
  booktitle = {Papers of the {{SIGCSE}}/{{CSA Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '78},
  publisher = {{ACM}},
  author = {Manzo, M. Di and Ferraris, M. and Frisiani, A. L. and Midoro, V. and Olimpo, G.},
  urldate = {2016-01-11},
  date = {1978},
  pages = {7--15},
  keywords = {Computer aided instruction},
  file = {Manzo_et_al_1978_COMES.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CN5ETGUE/Manzo_et_al_1978_COMES.pdf:application/pdf}
}

@inproceedings{kay_large_1998,
  location = {{New York, NY, USA}},
  title = {Large {{Introductory Computer Science Classes}}: {{Strategies}} for {{Effective Course Management}}},
  isbn = {978-0-89791-994-4},
  url = {http://doi.acm.org/10.1145/273133.273177},
  doi = {10.1145/273133.273177},
  shorttitle = {Large {{Introductory Computer Science Classes}}},
  abstract = {Traditionally, a large introductory course meant a lecture hall with a single lecturer talking and students taking notes---but no longer. Today a wide variety of techniques, not only in the classroom but in labs and faculty offices and cyberspace, can make a large introductory course an extremely effective educational experience. We explore these practices, with pointers for further information, as a guide for instructors or departments faced with the large-course model of instruction.},
  timestamp = {2016-01-11T20:22:33Z},
  booktitle = {Proceedings of the {{Twenty}}-ninth {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '98},
  publisher = {{ACM}},
  author = {Kay, David G.},
  urldate = {2016-01-11},
  date = {1998},
  pages = {131--134},
  keywords = {course management,introductory courses,large courses,teaching techniques},
  file = {Kay_1998_Large_Introductory_Computer_Science_Classes.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IM3PK5K6/Kay_1998_Large_Introductory_Computer_Science_Classes.pdf:application/pdf}
}

@inproceedings{stout_lesbian_2015,
  title = {Lesbian, {{Gay}}, {{Bisexual}}, {{Transgender}}, and {{Queer}} students' sense of belonging in computing},
  doi = {10.1109/RESPECT.2015.7296501},
  abstract = {The field of computing is rapidly developing, requiring a strong and diverse labor force. The current work assessed the relationship between Lesbian, Gay, Bisexual, Transgender, and Queer (LGBTQ) students' sense of belonging in computing and thoughts about leaving the field. The results of two studies indicated that among undergraduate students (Study 1) and graduate students (Study 2), thoughts about leaving one's computing program were associated with feeling a low sense of belonging in the computing community. These findings suggest that in order to capitalize on talent and perspective offered by the LGBTQ community, the field of computing should make greater strides towards inclusivity.},
  eventtitle = {Research in Equity and Sustained Participation in Engineering, Computing, and Technology (RESPECT), 2015},
  timestamp = {2016-01-13T16:26:43Z},
  booktitle = {Research in {{Equity}} and {{Sustained Participation}} in {{Engineering}}, {{Computing}}, and {{Technology}} ({{RESPECT}}), 2015},
  author = {Stout, J.G. and Wright, H.M.},
  date = {2015-08},
  pages = {1--5},
  keywords = {belonging,Computer science,computer science education,computing community,computing program,Engineering profession,Force,further education,graduate students,Heating,heteronormativity,human factors,Interviews,labor force,lesbian-gay-bisexual-transgender-and-queer students,LGBTQ students,Meteorology,Pipelines,retention,sense-of-belonging,sexual orientation,undergraduate students},
  file = {IEEE Xplore Abstract Record:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PMVN43AZ/abs_all.html:;Stout+Wright_2015_Lesbian,_Gay,_Bisexual,_Transgender,_and_Queer_students'_sense_of_belonging_in.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PVF8H9WC/Stout+Wright_2015_Lesbian,_Gay,_Bisexual,_Transgender,_and_Queer_students'_sense_of_belonging_in.pdf:application/pdf}
}

@inproceedings{perrenet_exploring_2005,
  location = {{New York, NY, USA}},
  title = {Exploring {{Students}}' {{Understanding}} of the {{Concept}} of {{Algorithm}}: {{Levels}} of {{Abstraction}}},
  isbn = {978-1-59593-024-8},
  url = {http://doi.acm.org/10.1145/1067445.1067467},
  doi = {10.1145/1067445.1067467},
  shorttitle = {Exploring {{Students}}' {{Understanding}} of the {{Concept}} of {{Algorithm}}},
  abstract = {How do we know if our students are beginning to think like computer scientists? In this study we have defined four levels of abstraction in the thinking of computer science students about the concept of algorithm. We constructed a list of questions about algorithms to measure the answering level as an indication for the thinking level. This list was presented to various groups of Bachelor Computer Science students. The mean answering level increased between successive year groups as well as within year groups during the year, mainly from the second to the third level. Little relation was found between answering levels and test results on algorithm oriented courses. The study was inspired by the tradition of mathematics education research.},
  timestamp = {2016-01-14T20:26:34Z},
  booktitle = {Proceedings of the 10th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  series = {ITiCSE '05},
  publisher = {{ACM}},
  author = {Perrenet, Jacob and Groote, Jan Friso and Kaasenbrood, Eric},
  urldate = {2016-01-14},
  date = {2005},
  pages = {64--68},
  keywords = {abstraction,computer science education},
  file = {Perrenet_et_al_2005_Exploring_Students'_Understanding_of_the_Concept_of_Algorithm.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/GDJEJKND/Perrenet_et_al_2005_Exploring_Students'_Understanding_of_the_Concept_of_Algorithm.pdf:application/pdf}
}

@article{turkle_epistemological_1990,
  title = {Epistemological {{Pluralism}}: {{Styles}} and {{Voices}} within the {{Computer Culture}}},
  volume = {16},
  issn = {0097-9740},
  shorttitle = {Epistemological {{Pluralism}}},
  timestamp = {2016-01-21T03:00:30Z},
  eprinttype = {jstor},
  eprint = {3174610},
  number = {1},
  journaltitle = {Signs},
  shortjournal = {Signs},
  author = {Turkle, Sherry and Papert, Seymour},
  date = {1990},
  pages = {128--157},
  file = {Turkle+Papert_1990_Epistemological_Pluralism.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/2DEMP3UU/Turkle+Papert_1990_Epistemological_Pluralism.pdf:application/pdf}
}

@inproceedings{weintrop_block_2015,
  location = {{New York, NY, USA}},
  title = {To {{Block}} or {{Not}} to {{Block}}, {{That}} is the {{Question}}: {{Students}}' {{Perceptions}} of {{Blocks}}-based {{Programming}}},
  isbn = {978-1-4503-3590-4},
  url = {http://doi.acm.org/10.1145/2771839.2771860},
  doi = {10.1145/2771839.2771860},
  shorttitle = {To {{Block}} or {{Not}} to {{Block}}, {{That}} is the {{Question}}},
  abstract = {Blocks-based programming tools are becoming increasingly common in high-school introductory computer science classes. Such contexts are quite different than the younger audience and informal settings where these tools are more often used. This paper reports findings from a study looking at how high school students view blocks-based programming tools, what they identify as contributing to the perceived ease-of-use of such tools, and what they see as the most salient differences between blocks-based and text-based programming. Students report that numerous factors contribute to making blocks-based programming easy, including the natural language description of blocks, the drag-and-drop composition interaction, and the ease of browsing the language. Students also identify drawbacks to blocks-based programming compared to the conventional text-based approach, including a perceived lack of authenticity and being less powerful. These findings, along with the identified differences between blocks-based and text-based programming, contribute to our understanding of the suitability of using such tools in formal high school settings and can be used to inform the design of new, and revision of existing, introductory programming tools.},
  timestamp = {2016-01-21T18:28:29Z},
  booktitle = {Proceedings of the 14th {{International Conference}} on {{Interaction Design}} and {{Children}}},
  series = {IDC '15},
  publisher = {{ACM}},
  author = {Weintrop, David and Wilensky, Uri},
  urldate = {2016-01-21},
  date = {2015},
  pages = {199--208},
  keywords = {blocks-based programming,high school computer science education,perceptions of programming},
  file = {Weintrop+Wilensky_2015_To_Block_or_Not_to_Block,_That_is_the_Question.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/85CCA5Z7/Weintrop+Wilensky_2015_To_Block_or_Not_to_Block,_That_is_the_Question.pdf:application/pdf}
}

@inproceedings{thomas_learning_2002,
  location = {{New York, NY, USA}},
  title = {Learning {{Styles}} and {{Performance}} in the {{Introductory Programming Sequence}}},
  isbn = {978-1-58113-473-5},
  url = {http://doi.acm.org/10.1145/563340.563352},
  doi = {10.1145/563340.563352},
  abstract = {This paper reports on the implication of different preferred learning styles on students' performance in the introductory programming sequence and on work in progress on how to accommodate these different styles.Students were given a learning styles preference test and then their preferred learning styles were compared to their performance on the exam and the practical programming part of the introductory programming module. There were significant differences in performance between groups of students.This result could lead one to two possible conclusions. One might be that some students' learning styles are more suited to learning programming than others.An alternative explanation is that our current methods of teaching advantage students with certain learning preference styles. We are at present in the process of testing this second assumption by providing students with a wider range of learning materials. We will then see if student performance is improved by using our current results as a baseline for comparison},
  timestamp = {2016-01-25T19:48:10Z},
  booktitle = {Proceedings of the 33rd {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '02},
  publisher = {{ACM}},
  author = {Thomas, Lynda and Ratcliffe, Mark and Woodbury, John and Jarman, Emma},
  urldate = {2016-01-25},
  date = {2002},
  pages = {33--37},
  keywords = {Diagnostic testing,introductory programming,Learning styles,Software Engineering Education,Student profiling},
  file = {Thomas_et_al_2002_Learning_Styles_and_Performance_in_the_Introductory_Programming_Sequence.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CMS4558X/Thomas_et_al_2002_Learning_Styles_and_Performance_in_the_Introductory_Programming_Sequence.pdf:application/pdf}
}

@inproceedings{moritz_objectsfirst_2005,
  location = {{New York, NY, USA}},
  title = {From {{Objects}}-first to {{Design}}-first with {{Multimedia}} and {{Intelligent Tutoring}}},
  isbn = {978-1-59593-024-8},
  url = {http://doi.acm.org/10.1145/1067445.1067475},
  doi = {10.1145/1067445.1067475},
  abstract = {"Objects-first" is an increasingly popular strategy for teaching object-oriented programming by introducing the concepts of objects, classes, and instances before procedural elements of a programming language. Still, this approach emphasizes coding rather than other critical aspects of software development, notably problem-solving and design. We propose a "design-first" curriculum, which subsumes an objects-first approach into lessons that also introduce object-oriented analysis and design, using elements of UML before implementing any code. We also present CIMEL ITS, an intelligent tutoring system that uses the design-first approach to help students of various learning styles in a CS1 course. It interfaces with an IDE we have chosen specifically to support the design-first curriculum, and CIMEL, multimedia courseware which has been shown to be effective in helping students learn object-oriented programming concepts.},
  timestamp = {2016-01-25T20:00:50Z},
  booktitle = {Proceedings of the 10th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  series = {ITiCSE '05},
  publisher = {{ACM}},
  author = {Moritz, Sally H. and Wei, Fang and Parvez, Shahida M. and Blank, Glenn D.},
  urldate = {2016-01-25},
  date = {2005},
  pages = {99--103},
  keywords = {ASEE2016/probem solving first,CIMEL,courseware,CS1,Eclipse,e-learning,IDE,intelligent tutoring system,java,Java in high schools,multimedia,object-oriented programming,objects-first,pedagogy,student model,UML},
  file = {Moritz_et_al_2005_From_Objects-first_to_Design-first_with_Multimedia_and_Intelligent_Tutoring.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/H35VUWSB/Moritz_et_al_2005_From_Objects-first_to_Design-first_with_Multimedia_and_Intelligent_Tutoring.pdf:application/pdf}
}

@article{backus_can_1978,
  title = {Can {{Programming Be Liberated}} from the {{Von Neumann Style}}?: {{A Functional Style}} and {{Its Algebra}} of {{Programs}}},
  volume = {21},
  issn = {0001-0782},
  url = {http://doi.acm.org/10.1145/359576.359579},
  doi = {10.1145/359576.359579},
  shorttitle = {Can {{Programming Be Liberated}} from the {{Von Neumann Style}}?},
  abstract = {Conventional programming languages are growing ever more enormous, but not stronger. Inherent defects at the most basic level cause them to be both fat and weak: their primitive word-at-a-time style of programming inherited from their common ancestor—the von Neumann computer, their close coupling of semantics to state transitions, their division of programming into a world of expressions and a world of statements, their inability to effectively use powerful combining forms for building new programs from existing ones, and their lack of useful mathematical properties for reasoning about programs.
An alternative functional style of programming is founded on the use of combining forms for creating programs. Functional programs deal with structured data, are often nonrepetitive and nonrecursive, are hierarchically constructed, do not name their arguments, and do not require the complex machinery of procedure declarations to become generally applicable. Combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages.
Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose “unknowns” are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written. Combining forms are chosen not only for their programming power but also for the power of their associated algebraic laws. General theorems of the algebra give the detailed behavior and termination conditions for large classes of programs.
 A new class of computing systems uses the functional programming style both in its programming language and in its state transition rules. Unlike von Neumann languages, these systems have semantics loosely coupled to states—only one state transition occurs per major computation.},
  timestamp = {2016-01-26T16:32:36Z},
  number = {8},
  journaltitle = {Commun. ACM},
  shortjournal = {Commun ACM},
  author = {Backus, John},
  urldate = {2016-01-26},
  date = {1978-08},
  pages = {613--641},
  keywords = {algebra of programs,applicative computing systems,applicative state transition systems,combining forms,functional forms,functional programming,metacomposition,models of computing systems,program correctness,programming languages,program termination,program transformation,von Neumann computers,von Neumann languages},
  file = {Backus_1978_Can_Programming_Be_Liberated_from_the_Von_Neumann_Style.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/P9P2ATT7/Backus_1978_Can_Programming_Be_Liberated_from_the_Von_Neumann_Style.pdf:application/pdf}
}

@inproceedings{eckerdal_what_2005,
  location = {{New York, NY, USA}},
  title = {What {{Does It Take}} to {{Learn}} '{{Programming Thinking}}'?},
  isbn = {978-1-59593-043-9},
  url = {http://doi.acm.org/10.1145/1089786.1089799},
  doi = {10.1145/1089786.1089799},
  abstract = {What is 'programming thinking'? In a study, first year students were interviewed on their understanding of what learning to program means. Many students talked about learning to program in terms of learning a special way to think, different from other subjects studied. Many of these students had problems in describing what this special way to think included. The analysis of the interviews revealed some features of this thinking, as expressed by the students. In this paper we discuss and analyse 'programming thinking' using phenomenography as our research approach {[}7]. Our results are coherent with Hazzan's research on the learning theory 'process-object duality' {[}4], but points to problems in learning of object-oriented programming not indicated in 'process-object duality'. In comparing the results form our own study with this learning theory, we discuss what this might mean in learning object-oriented programming.},
  timestamp = {2016-01-27T21:16:48Z},
  booktitle = {Proceedings of the {{First International Workshop}} on {{Computing Education Research}}},
  series = {ICER '05},
  publisher = {{ACM}},
  author = {Eckerdal, Anna and Thuné, Michael and Berglund, Anders},
  urldate = {2016-01-27},
  date = {2005},
  pages = {135--142},
  keywords = {levels of abstraction,phenomenography,process-object duality},
  file = {Eckerdal_et_al_2005_What_Does_It_Take_to_Learn_'Programming_Thinking'.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/QRHKA22V/Eckerdal_et_al_2005_What_Does_It_Take_to_Learn_'Programming_Thinking'.pdf:application/pdf}
}

@article{hazzan_how_2003,
  title = {How {{Students Attempt}} to {{Reduce Abstraction}} in the {{Learning}} of {{Mathematics}} and in the {{Learning}} of {{Computer Science}}},
  volume = {13},
  issn = {0899-3408},
  url = {http://www.tandfonline.com/doi/abs/10.1076/csed.13.2.95.14202},
  doi = {10.1076/csed.13.2.95.14202},
  abstract = {This article focuses on ion and ways in which students cope with abstraction. The article has two goals: first, it illustrates how the theme of reducing abstraction (Hazzan, 1999) is useful for analyzing students' thinking about abstract concepts in mathematics and in computer science; second, it demonstrates how theories based on mathematics education research can be applied to analyzing students' understanding of computer science concepts. The main section of the article analyzes the understanding of concepts from four fields – abstract algebra, computability, data structures and differential equations – through the lens of reducing abstraction. The analysis shows that a wide range of cognitive phenomena can be explained by one theoretical framework.},
  timestamp = {2016-01-27T21:14:55Z},
  number = {2},
  journaltitle = {Computer Science Education},
  shortjournal = {Comput. Sci. Educ.},
  author = {Hazzan, Orit},
  urldate = {2016-01-27},
  date = {2003-06-01},
  pages = {95--122},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/T33GKZX4/csed.13.2.95.html:}
}

@article{bennedsen_failure_2007,
  title = {Failure {{Rates}} in {{Introductory Programming}}},
  volume = {39},
  issn = {0097-8418},
  url = {http://doi.acm.org/10.1145/1272848.1272879},
  doi = {10.1145/1272848.1272879},
  abstract = {It is a common conception that CS1 is a very difficult course and that failure rates are high. However, until now there has only been anecdotal evidence for this claim. This article reports on a survey among institutions around the world regarding failure rates in introductory programming courses. The article describes the design of the survey and the results. The number of institutions answering the call for data was unfortunately rather low, so it is difficult to make firm conclusions. It is our hope that this article can be the starting point for a systematic collection of data in order to find solid proof of the actual failure and pass rates of CS1.},
  timestamp = {2016-01-30T02:37:45Z},
  number = {2},
  journaltitle = {SIGCSE Bull.},
  shortjournal = {SIGCSE Bull},
  author = {Bennedsen, Jens and Caspersen, Michael E.},
  urldate = {2016-01-30},
  date = {2007-06},
  pages = {32--36},
  keywords = {CS1,failure rate,introductory programming,pass rate},
  file = {Bennedsen+Caspersen_2007_Failure_Rates_in_Introductory_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/5BWJ9REH/Bennedsen+Caspersen_2007_Failure_Rates_in_Introductory_Programming.pdf:application/pdf}
}

@article{bailie_objects_2003,
  title = {Objects {{First}} - {{Does It Work}}?},
  volume = {19},
  issn = {1937-4771},
  url = {http://dl.acm.org/citation.cfm?id=948785.948827},
  abstract = {Many colleges and universities have switched to Java as the language in CS1 and CS2. The object-oriented paradigm, and Java in particular, fosters an "objects first" approach that starts with classes and objects from the first day and introduces basic programming constructs such as conditionals and loops as needed to solve specific problems. This methodology is foreign to those who have been teaching introductory programming for more than five years but seems to work for students who have no prior background. This panel will explore the question of whether or not the "objects first" approach is the most effective way to teach the art and science of programming.},
  timestamp = {2016-01-27T21:17:22Z},
  number = {2},
  journaltitle = {J. Comput. Sci. Coll.},
  shortjournal = {J Comput Sci Coll},
  author = {Bailie, Frances and Courtney, Mary and Murray, Keitha and Schiaffino, Robert and Tuohy, Sylvester},
  urldate = {2016-01-27},
  date = {2003-12},
  pages = {303--305},
  file = {Bailie_et_al_2003_Objects_First_-_Does_It_Work.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/H5D9HCBD/Bailie_et_al_2003_Objects_First_-_Does_It_Work.pdf:application/pdf}
}

@inproceedings{mannila_objective_2006,
  location = {{New York, NY, USA}},
  title = {An {{Objective Comparison}} of {{Languages}} for {{Teaching Introductory Programming}}},
  url = {http://doi.acm.org/10.1145/1315803.1315811},
  doi = {10.1145/1315803.1315811},
  abstract = {The question of which language to use in introductory programming has been cause for protracted debate, often based on emotive opinions. Several studies on the benefits of individual languages or comparisons between two languages have been conducted, but there is still a lack of objective data used to inform these comparisons. This paper presents a list of criteria based on design decisions used by prominent teaching-language creators. The criteria, once justified, are then used to compare eleven languages which are currently used in introductory programming courses. Recommendations are made on how these criteria can be used or adapted for different situations.},
  timestamp = {2016-01-28T03:36:32Z},
  booktitle = {Proceedings of the 6th {{Baltic Sea Conference}} on {{Computing Education Research}}: {{Koli Calling}} 2006},
  series = {Baltic Sea '06},
  publisher = {{ACM}},
  author = {Mannila, Linda and de Raadt, Michael},
  urldate = {2016-01-28},
  date = {2006},
  pages = {32--37},
  keywords = {industry,programming languages,teaching},
  options = {useprefix=true},
  file = {Mannila+de_Raadt_2006_An_Objective_Comparison_of_Languages_for_Teaching_Introductory_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/T3KP5X7K/Mannila+de_Raadt_2006_An_Objective_Comparison_of_Languages_for_Teaching_Introductory_Programming.pdf:application/pdf}
}

@inproceedings{muller_guidelines_2005,
  location = {{New York, NY, USA}},
  title = {Guidelines for a {{Multiple}}-goal {{CS Introductory Course}}: {{Algorithmic Problem}}-solving {{Woven}} into {{OOP}}},
  isbn = {978-1-59593-024-8},
  url = {http://doi.acm.org/10.1145/1067445.1067555},
  doi = {10.1145/1067445.1067555},
  shorttitle = {Guidelines for a {{Multiple}}-goal {{CS Introductory Course}}},
  abstract = {Over the years educators have been debating about the most appropriate paradigm for teaching an introductory course in computer science (CS). Specifically, the pedagogical approach known as "objects early" or "objects first" is controversial {[}2,3,4]. One important reason for educators to argue against the objects early approach is their concern that starting with objects results in the learning of algorithmic problem-solving to be neglected {[}4]. In this poster we present a pedagogical framework for an introductory multiple-goal course in OOP based on weaving algorithmic pattern-based problem solving activities into OOD/P instruction {[}5].},
  timestamp = {2016-01-28T04:06:17Z},
  booktitle = {Proceedings of the 10th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  series = {ITiCSE '05},
  publisher = {{ACM}},
  author = {Muller, Orna and Haberman, Bruria},
  urldate = {2016-01-28},
  date = {2005},
  pages = {356--356},
  keywords = {algorithm,objects-first,PROBLEM SOLVING},
  file = {Muller+Haberman_2005_Guidelines_for_a_Multiple-goal_CS_Introductory_Course.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/3D8SPKXV/Muller+Haberman_2005_Guidelines_for_a_Multiple-goal_CS_Introductory_Course.pdf:application/pdf}
}

@inproceedings{sheard_analysis_2009,
  location = {{New York, NY, USA}},
  title = {Analysis of {{Research}} into the {{Teaching}} and {{Learning}} of {{Programming}}},
  isbn = {978-1-60558-615-1},
  url = {http://doi.acm.org/10.1145/1584322.1584334},
  doi = {10.1145/1584322.1584334},
  abstract = {This paper presents an analysis of research papers about programming education that were published in computing education conferences in the years 2005 to 2008. We employed Simon's classification scheme to identify the papers of interest from the ICER, SIGCSE, ITiCSE, ACE, Koli Calling and NACCQ conferences. Having identified the papers, we analyzed the type of data collected, whether the analysis was qualitative, quantitative, or mixed, and the aims and outcomes being reported. The greatest number of papers employed quantitative research methods, investigated the ability, aptitude, or understanding of students, and were based in single courses. The theme of the research and the type of study conducted vary across the conferences, indicating the different nature and role of each conference. Papers that investigated student learning of programming in terms of established theories or models of learning were not common, indicating an area of research that deserves more attention.},
  timestamp = {2016-01-28T16:28:52Z},
  booktitle = {Proceedings of the {{Fifth International Workshop}} on {{Computing Education Research Workshop}}},
  series = {ICER '09},
  publisher = {{ACM}},
  author = {Sheard, Judy and Simon, S. and Hamilton, Margaret and Lönnberg, Jan},
  urldate = {2016-01-28},
  date = {2009},
  pages = {93--104},
  keywords = {classifying publications,computing education,research methods,teaching and learning of programming},
  file = {Sheard_et_al_2009_Analysis_of_Research_into_the_Teaching_and_Learning_of_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PSBRZS5U/Sheard_et_al_2009_Analysis_of_Research_into_the_Teaching_and_Learning_of_Programming.pdf:application/pdf}
}

@article{streveler_learning_2008,
  title = {Learning {{Conceptual Knowledge}} in the {{Engineering Sciences}}: {{Overview}} and {{Future Research Directions}}},
  volume = {97},
  url = {www.summon.com},
  abstract = {Learning conceptual knowledge in engineering science is a critical element in the development of competence and expertise in engineering. To date, however, research on conceptual learning in engineering science has been limited. Therefore, this article draws heavily on fundamental research by cognitive psychologists and applied research by science educators to provide a background on fundamental issues in the field and methods for assessing conceptual knowledge. Some of the most common conceptual difficulties from three domains: mechanics, thermal science and direct current electricity, are discussed to provide concrete examples of what students find difficult to learn. The article concludes with a discussion of possible sources of these difficulties, implications for instruction, and suggestions for future research. {[}PUBLICATION ABSTRACT]; Learning conceptual knowledge in engineering science is a critical element in the development of competence and expertise in engineering. To date, however, research on conceptual learning in engineering science has been limited. Therefore, this article draws heavily on fundamental research by cognitive psychologists and applied research by science educators to provide a background on fundamental issues in the field and methods for assessing conceptual knowledge. Some of the most common conceptual difficulties from three domains: mechanics, thermal science and direct current electricity, are discussed to provide concrete examples of what students find difficult to learn. The article concludes with a discussion of possible sources of these difficulties, implications for instruction, and suggestions for future research.},
  timestamp = {2015-09-29T22:12:36Z},
  langid = {english},
  number = {3},
  journaltitle = {Journal of Engineering Education},
  shortjournal = {J. Eng. Educ.},
  author = {Streveler, RA and Litzinger, TA and Miller, RL and Steif, PS},
  date = {2008},
  pages = {279--294},
  keywords = {ACCELERATION,CIRCUITS,Cognition & reasoning,CONCEPT INVENTORY,conceptual change,conceptual knowledge,education,EDUCATION & EDUCATIONAL RESEARCH,ENGINEERING,Engineering research,Engineers,GUIDE,Instructional design,INTRODUCTORY MECHANICS,Learning,Models,MULTIDISCIPLINARY,ONE-DIMENSION,SCIENTIFIC DISCIPLINES,SKILL,Students,student understanding,THERMODYNAMICS,VELOCITY},
  file = {Streveler_et_al_2008_Learning_Conceptual_Knowledge_in_the_Engineering_Sciences.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/MM7CTVMR/Streveler_et_al_2008_Learning_Conceptual_Knowledge_in_the_Engineering_Sciences.pdf:application/pdf}
}

@article{engelbart_augmenting_1962,
  title = {Augmenting human intellect: a conceptual framework},
  url = {https://books.google.com/books?hl=en&lr=&id=adtKCdwzwqIC&oi=fnd&pg=PA64&dq=Engelbart+Augmenting+the+human+intellect&ots=frGmnkPA8f&sig=C21Nk3gbtPNJXVHk7_81E9loZWE},
  shorttitle = {Augmenting human intellect},
  timestamp = {2015-10-27T18:46:44Z},
  journaltitle = {PACKER, Randall and JORDAN, Ken. Multimedia. From Wagner to Virtual Reality. New York: WW Norton \& Company},
  shortjournal = {Pack. Randall JORDAN Ken Multimed. Wagner Virtual Real. N. Y. WW Nort. Co.},
  author = {Engelbart, Douglas C.},
  urldate = {2015-10-26},
  date = {1962},
  pages = {64--90},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/FSSQZHIB/books.html:;Engelbart_2001_Augmenting_human_intellect.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/NRXK9XHZ/Engelbart_2001_Augmenting_human_intellect.pdf:application/pdf}
}

@book{papert_mindstorms_1980,
  title = {Mindstorms: {{Children}}, computers, and powerful ideas},
  timestamp = {2016-01-27T20:41:10Z},
  publisher = {{Basic Books, Inc.}},
  author = {Papert, Seymour},
  date = {1980}
}

@incollection{kay_history_1996,
  location = {{New York, NY, USA}},
  title = {The {{Early History}} of {{Smalltalk}}},
  isbn = {978-0-201-89502-5},
  url = {http://doi.acm.org/10.1145/234286.1057828},
  abstract = {Most ideas come from previous ideas. The sixties, particularly in the ARPA community, gave rise to a host of notions about "human-computer symbiosis" through interactive time-shared computers, graphics screens, and pointing devices. Advanced computer languages were invented to simulate complex systems such as oil refineries and semi-intelligent behavior. The soon to follow paradigm shift of modern personal computing, overlapping window interfaces, and object-oriented design came from seeing the work of the sixties as something more than a "better old thing." That is, more than a better way: to do mainframe computing; for end-users to invoke functionality; to make data structures more abstract. Instead the promise of exponential growth in computing/{\textdollar}/volume demanded that the sixties be regarded as "almost a new thing" and to find out what the actual "new things" might be. For example, one would compute with a handheld "Dynabook" in a way that would not be possible on a shared main-frame; millions of potential users meant that the user interface would have to become a learning environment along the lines of Montessori and Bruner; and needs for large scope, reduction in complexity, and end-user literacy would require that data and control structures be done away with in favor of a more biological scheme of protected universal cells interacting only through messages that could mimic any desired behavior.Early Smalltalk was the first complete realization of these new points of view as parented by its many predecessors in hardware, language, and user interface design. It became the exemplar of the new computing, in part, because we were actually trying for a qualitative shift in belief structures---a new Kuhnian paradigm in the same spirit as the invention of the printing press---and thus took highly extreme positions that almost forced these new styles to be invented.},
  timestamp = {2016-02-02T02:42:59Z},
  publisher = {{ACM}},
  author = {Kay, Alan C.},
  editor = {Bergin, Jr., Thomas J. and Gibson, Jr., Richard G.},
  urldate = {2016-01-30},
  date = {1996},
  pages = {511--598},
  file = {Kay_1996_History_of_Programming_languages—II.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/ZSHMF3DM/Kay_1996_History_of_Programming_languages—II.pdf:application/pdf}
}

@online{whitehouse_computer_2016,
  title = {Computer {{Science For All}}},
  url = {https://www.whitehouse.gov/blog/2016/01/30/computer-science-all},
  abstract = {Learn about President Obama’s bold new initiative to empower a generation of American students with the computer science skills they need to thrive in a digital economy.},
  timestamp = {2016-02-01T04:34:07Z},
  titleaddon = {whitehouse.gov},
  author = {White House, U.S.},
  urldate = {2016-02-01},
  date = {2016-01-30/2016-01},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/QN5JCVBN/computer-science-all.html:}
}

@online{code.org_every_2016,
  title = {Every child deserves opportunity},
  url = {https://code.org/},
  abstract = {Every student in every school deserves the opportunity to study computer science.},
  timestamp = {2016-02-01T04:39:17Z},
  titleaddon = {Code.org},
  author = {{code.org},},
  urldate = {2016-02-01},
  date = {2016},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/K8R6FCDP/code.org.html:}
}

@book{nae_educating_2004,
  location = {{Washington, DC}},
  title = {Educating the {{Engineer}} of 2020: visions of engineering in the new century},
  isbn = {0-309-09162-4 978-0-309-09162-6 978-0-309-53065-1 0-309-53065-2},
  url = {www.summon.com},
  timestamp = {2016-02-01T19:16:14Z},
  langid = {english},
  publisher = {{National Academies Press}},
  author = {NAE, National Academy of Engineering},
  date = {2004},
  keywords = {ENGINEERING}
}

@inproceedings{bishop_flipped_2013,
  location = {{Atlanta, GA}},
  title = {The {{Flipped Classroom}}: {{A Survey}} of the {{Research}}},
  abstract = {Recent advances in technology and in ideology have unlocked entirely new directions for educa-
tion research. Mounting pressure from increasing tuition costs and free, online course offerings
is opening discussion and catalyzing change in the physical classroom. The flipped classroom is
at the center of this discussion. The flipped classroom is a new pedagogical method, which em-
ploys asynchronous video lectures and practice problems as homework, and active, group-based
problem solving activities in the classroom. It represents a unique combination of learning theo-
ries once thought to be incompatible—active, problem-based learning activities founded upon a
constructivist ideology and instructional lectures derived from direct instruction methods founded
upon behaviorist principles.},
  eventtitle = {ASEE Annual Conferance \& Exposition},
  timestamp = {2016-02-02T11:51:49Z},
  author = {Bishop, Jacob L. and Verleger, Matthew A.},
  date = {2013-06},
  keywords = {flipped classroom,Online education,TECHNOLOGY}
}

@inproceedings{flynn_engineering_2014,
  location = {{Bridgeport, CT}},
  title = {Engineering {{Student Misconceptions}} about {{Rate}} and {{Accumulation Processes}}},
  eventtitle = {ASEE Zone I Conference},
  timestamp = {2016-02-02T12:38:39Z},
  author = {Flynn, Carli D and Davidson, Cliff I and Dotger, Sharon},
  date = {2014}
}

@article{grimmelmann_merchants_2014,
  title = {Merchants of {{MOOCs}}, {{The}}},
  volume = {44},
  url = {http://heinonlinebackup.com/hol-cgi-bin/get_pdf.cgi?handle=hein.journals/shlr44&section=34},
  timestamp = {2016-02-02T11:57:12Z},
  journaltitle = {Seton Hall L. Rev.},
  shortjournal = {Seton Hall Rev},
  author = {Grimmelmann, James},
  urldate = {2016-02-02},
  date = {2014},
  pages = {i}
}

@article{desantis_students_2015,
  title = {Do {{Students Learn More From}} a {{Flip}}? {{An Exploration}} of the {{Efficacy}} of {{Flipped}} and {{Traditional Lessons}}},
  volume = {26},
  url = {http://www.editlib.org/p/130133/paper_130133.pdf},
  shorttitle = {Do {{Students Learn More From}} a {{Flip}}?},
  timestamp = {2016-02-02T11:57:12Z},
  number = {1},
  journaltitle = {Journal of Interactive Learning Research},
  shortjournal = {J. Interact. Learn. Res.},
  author = {DeSantis, Joshua and Van Curen, Rebecca and Putsch, Jake and Metzger, Justin},
  urldate = {2016-02-02},
  date = {2015},
  pages = {39--63}
}

@inproceedings{lahtinen_study_2005,
  location = {{New York, NY, USA}},
  title = {A {{Study}} of the {{Difficulties}} of {{Novice Programmers}}},
  isbn = {978-1-59593-024-8},
  url = {http://doi.acm.org/10.1145/1067445.1067453},
  doi = {10.1145/1067445.1067453},
  abstract = {Programming is related to several fields of technology, and many university students are studying the basics of it. Unfortunately, they often face difficulties already on the basic courses. This work studies the difficulties in learning programming in order to support developing learning materials for basic programming courses. The difficulties have to be recognized to be able to aid learning and teaching in an effective way.An international survey of opinions was organized for more than 500 students and teachers. This paper analyses the results of the survey. The survey provides information of the difficulties experienced and perceived when learning and teaching programming. The survey results also provide basis for recommendations for developing learning materials and approaches.},
  timestamp = {2016-02-02T12:13:40Z},
  booktitle = {Proceedings of the 10th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  series = {ITiCSE '05},
  publisher = {{ACM}},
  author = {Lahtinen, Essi and Ala-Mutka, Kirsti and Järvinen, Hannu-Matti},
  urldate = {2016-02-02},
  date = {2005},
  pages = {14--18},
  keywords = {difficulties,learning,novices,programming,teaching},
  file = {Lahtinen_et_al_2005_A_Study_of_the_Difficulties_of_Novice_Programmers.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/WV2SQSD6/Lahtinen_et_al_2005_A_Study_of_the_Difficulties_of_Novice_Programmers.pdf:application/pdf}
}

@inproceedings{cohoon_introductory_2007,
  location = {{New York, NY, USA}},
  title = {An {{Introductory Course Format}} for {{Promoting Diversity}} and {{Retention}}},
  isbn = {978-1-59593-361-4},
  url = {http://doi.acm.org/10.1145/1227310.1227450},
  doi = {10.1145/1227310.1227450},
  abstract = {We report on a pilot section of an introductory computing course offered at a top tier university through its engineering school. Although targeted for students with no prior programming experience, its goals were same as the goals of the other sections. The course enrolled 43 students. They were 49\% female, 23\% black, and 12\% Hispanic. The demographics are different from the typical 1st year class at the school, which is 26\% female, 6\% black, and 3\% Hispanic. Two important pedagogies differentiated the pilot section from other sections: computer availability at all class meetings and the methodology for selecting motivating examples. A priori only one student in the section intended a computing major, but upon completion the students chose a computing major at a higher rate than the rates for other sections: 19\% versus 13\%. More striking is that 33\% of the pilot section women and 27\% of its minority students chose a computing major. All students completed the course and no student left the school. These outcomes compare favorably to a school course withdrawal rate of 12\% and a school attrition rate of 10\%, a female attrition rate of 12\%, and a minority rate attrition of 25\%.},
  timestamp = {2016-01-21T17:43:35Z},
  booktitle = {Proceedings of the 38th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '07},
  publisher = {{ACM}},
  author = {Cohoon, James P.},
  urldate = {2016-01-21},
  date = {2007},
  pages = {395--399},
  keywords = {diversity,introductory computer science,programming},
  file = {Cohoon_2007_An_Introductory_Course_Format_for_Promoting_Diversity_and_Retention.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/RMRQXNHX/Cohoon_2007_An_Introductory_Course_Format_for_Promoting_Diversity_and_Retention.pdf:application/pdf}
}

@inproceedings{rich_cs1_2004,
  location = {{New York, NY, USA}},
  title = {A {{CS1 Course Designed}} to {{Address Interests}} of {{Women}}},
  isbn = {978-1-58113-798-9},
  url = {http://doi.acm.org/10.1145/971300.971370},
  doi = {10.1145/971300.971370},
  abstract = {Literature on women in computing points out that computer science is not being effective at attracting and retaining women. Introduction to Media Computation is a new CS1 aimed especially at non-majors which was designed explicitly to address the concerns of women in computer science, such as the lack of relevance and creativity. The course is contextualized around the theme of manipulating and creating media. Of the 121 students who took the course (2/3 female), only three students dropped (all male), and 89\% completed the course with a grade C or better. This paper presents data from interviews with women in the Media Computation class, then contrasts with interviews in a more traditional CS1.},
  timestamp = {2016-01-25T20:51:52Z},
  booktitle = {Proceedings of the 35th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '04},
  publisher = {{ACM}},
  author = {Rich, Lauren and Perry, Heather and Guzdial, Mark},
  urldate = {2016-01-25},
  date = {2004},
  pages = {190--194},
  keywords = {CS1/2,multimedia,non-majors,programming},
  file = {Rich_et_al_2004_A_CS1_Course_Designed_to_Address_Interests_of_Women.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CPVBF6WU/Rich_et_al_2004_A_CS1_Course_Designed_to_Address_Interests_of_Women.pdf:application/pdf}
}

@inproceedings{reges_back_2006,
  location = {{New York, NY, USA}},
  title = {Back to {{Basics}} in {{CS1}} and {{CS2}}},
  isbn = {978-1-59593-259-4},
  url = {http://doi.acm.org/10.1145/1121341.1121432},
  doi = {10.1145/1121341.1121432},
  abstract = {This paper describes a significant redesign of the introductory courses at the University of Washington that has led to increased enrollments, increased student satisfaction and an increase in the number of women admitted to the CS major. The new courses are still taught in Java, but they represent a return to the basics that were emphasized in the pre-Java era. The biggest changes have occurred in the CS1 course where we have replaced an "objects early" curriculum with a more traditional procedural approach using static methods in Java. The new CS1 course emphasizes problem solving, procedural decomposition and mastery of basic skills (e.g., loops, conditionals and arrays). The new CS2 course emphasizes data structures, linked lists, binary trees and recursion.},
  timestamp = {2016-01-25T19:56:36Z},
  booktitle = {Proceedings of the 37th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '06},
  publisher = {{ACM}},
  author = {Reges, Stuart},
  urldate = {2016-01-25},
  date = {2006},
  pages = {293--297},
  keywords = {CS1,CS2,objects first,PROBLEM SOLVING},
  file = {Reges_2006_Back_to_Basics_in_CS1_and_CS2.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/H7R349ZT/Reges_2006_Back_to_Basics_in_CS1_and_CS2.pdf:application/pdf}
}

@inproceedings{goldwasser_teaching_2008,
  location = {{New York, NY, USA}},
  title = {Teaching an {{Object}}-oriented {{CS1}} -: {{With Python}}},
  isbn = {978-1-60558-078-4},
  url = {http://doi.acm.org/10.1145/1384271.1384285},
  doi = {10.1145/1384271.1384285},
  shorttitle = {Teaching an {{Object}}-oriented {{CS1}} -},
  abstract = {There is an ongoing debate regarding the role of object orientation in the introductory programming sequence. While the pendulum swings to and fro between the "objects first" and "back to basics" extremes, there is general agreement that object-oriented programming is central to modern software development and therefore integral to a computer science curriculum. Developing effective approaches to teach these principles raises challenges that have been exacerbated by the use of Java or C++ as the first instructional language. In this paper, we recommend Python as an excellent choice for teaching an object-oriented CS1. Although often viewed as a "scripting" language, Python is a fully object-oriented language with a consistent object model and a rich set of built-in classes. Based upon our experiences, we describe aspects of the language that help support a balanced introduction to object orientation in CS1. We also discuss the downstream effects on our students' transition to Java and C++ in subsequent courses.},
  timestamp = {2016-01-20T22:38:22Z},
  booktitle = {Proceedings of the 13th {{Annual Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  series = {ITiCSE '08},
  publisher = {{ACM}},
  author = {Goldwasser, Michael H. and Letscher, David},
  urldate = {2016-01-20},
  date = {2008},
  pages = {42--46},
  keywords = {ASEE2016/language,ASEE2016/paradigm,CS1,object orientation,python},
  file = {Goldwasser+Letscher_2008_Teaching_an_Object-oriented_CS1_-.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/BNWJNGFJ/Goldwasser+Letscher_2008_Teaching_an_Object-oriented_CS1_-.pdf:application/pdf}
}

@inproceedings{felleisen_functional_2009,
  location = {{New York, NY, USA}},
  title = {A {{Functional I}}/{{O System}} or, {{Fun}} for {{Freshman Kids}}},
  isbn = {978-1-60558-332-7},
  url = {http://doi.acm.org/10.1145/1596550.1596561},
  doi = {10.1145/1596550.1596561},
  abstract = {Functional programming languages ought to play a central role in mathematics education for middle schools (age range: 10-14). After all, functional programming is a form of algebra and programming is a creative activity about problem solving. Introducing it into mathematics courses would make pre-algebra course come alive. If input and output were invisible, students could implement fun simulations, animations, and even interactive and distributed games all while using nothing more than plain mathematics. We have implemented this vision with a simple framework for purely functional I/O. Using this framework, students design, implement, and test plain mathematical functions over numbers, booleans, string, and images. Then the framework wires them up to devices and performs all the translation from external information to internal data (and vice versa)--just like every other operating system. Once middle school students are hooked o},
  timestamp = {2016-01-21T18:22:55Z},
  booktitle = {Proceedings of the 14th {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  series = {ICFP '09},
  publisher = {{ACM}},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  urldate = {2016-01-21},
  date = {2009},
  pages = {47--58},
  keywords = {functional programming,introductory,programming},
  file = {Felleisen_et_al_2009_A_Functional_I-O_System_or,_Fun_for_Freshman_Kids.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/D4W7PEKR/Felleisen_et_al_2009_A_Functional_I-O_System_or,_Fun_for_Freshman_Kids.pdf:application/pdf}
}

@inproceedings{crestani_experience_2010,
  location = {{New York, NY, USA}},
  title = {Experience {{Report}}: {{Growing Programming Languages}} for {{Beginning Students}}},
  isbn = {978-1-60558-794-3},
  url = {http://doi.acm.org/10.1145/1863543.1863576},
  doi = {10.1145/1863543.1863576},
  shorttitle = {Experience {{Report}}},
  abstract = {A student learning how to program learns best when the programming language and programming environment cater to her specific needs. These needs are different from the requirements of a professional programmer. Consequently, the design of teaching languages poses challenges different from the design of professional languages. Using a functional language by itself gives advantages over more popular, professional languages, but fully exploiting these advantages requires careful adaptation to the needs of the students' as-is, these languages do not support the students nearly as well as they could. This paper describes our experience adopting the didactic approach of How to Design Programs, focussing on the design process for our own set of teaching languages. We have observed students as they try to program as part of our introductory course, and used these observations to significantly improve the design of these languages. This paper describes the changes we have made, and the journey we took to get there.},
  timestamp = {2016-01-30T03:04:22Z},
  booktitle = {Proceedings of the 15th {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  series = {ICFP '10},
  publisher = {{ACM}},
  author = {Crestani, Marcus and Sperber, Michael},
  urldate = {2016-01-30},
  date = {2010},
  pages = {229--234},
  keywords = {introductory,programming}
}

@article{stiller_teaching_2009,
  title = {Teaching {{Programming Using Bricolage}}},
  volume = {24},
  issn = {1937-4771},
  url = {http://dl.acm.org/citation.cfm?id=1529995.1530004},
  abstract = {Traditional approaches to programming education work well for conventional computer science students, but in the face of reduced enrollments and a severe underrepresentation of women and minorities, we must offer a variety of pedagogies to reach students who do not respond to this pedagogical approach. Research spanning several decades suggests that analytically less-experienced students may do well using a bricolage approach. This paper illustrates how to apply this approach to teaching students to program, and discusses its success in a course called, The Art and Science of Animation.},
  timestamp = {2016-01-21T18:39:24Z},
  number = {6},
  journaltitle = {J. Comput. Sci. Coll.},
  shortjournal = {J Comput Sci Coll},
  author = {Stiller, Evelyn},
  urldate = {2016-01-21},
  date = {2009-06},
  pages = {35--42},
  file = {Stiller_2009_Teaching_Programming_Using_Bricolage.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/AA8VABWN/Stiller_2009_Teaching_Programming_Using_Bricolage.pdf:application/pdf}
}

@inproceedings{deraadt_chick_2006,
  location = {{Darlinghurst, Australia, Australia}},
  title = {Chick {{Sexing}} and {{Novice Programmers}}: {{Explicit Instruction}} of {{Problem Solving Strategies}}},
  isbn = {978-1-920682-34-7},
  url = {http://dl.acm.org/citation.cfm?id=1151869.1151878},
  shorttitle = {Chick {{Sexing}} and {{Novice Programmers}}},
  abstract = {This study examines the problem solving strategies used by expert programmers. Past studies of the cognitive processes of expert programmers suggest the existence of plans that describe the problem solving strategies held by these programmers. To date such strategies, which are relevant to novice programmers, have not been explicitly incorporated into the curricula of introductory programming courses. In revisiting these earlier studies and confirming the existence of the strategies held by experts, this study argues for inclusion of explicit strategy instruction.},
  timestamp = {2016-01-28T16:50:03Z},
  booktitle = {Proceedings of the 8th {{Australasian Conference}} on {{Computing Education}} - {{Volume}} 52},
  series = {ACE '06},
  publisher = {{Australian Computer Society, Inc.}},
  author = {de Raadt, Michael and Watson, Richard and Toleman, Mark},
  urldate = {2016-01-28},
  date = {2006},
  pages = {55--62},
  keywords = {expert,explicit instruction,novice,problem solving strategies,programming},
  options = {useprefix=true},
  file = {de_Raadt_et_al_2006_Chick_Sexing_and_Novice_Programmers.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/Q7AF4H3G/de_Raadt_et_al_2006_Chick_Sexing_and_Novice_Programmers.pdf:application/pdf}
}

@inproceedings{calloni_iconic_1997,
  location = {{New York, NY, USA}},
  title = {Iconic {{Programming Proves Effective}} for {{Teaching}} the {{First Year Programming Sequence}}},
  isbn = {978-0-89791-889-3},
  url = {http://doi.acm.org/10.1145/268084.268189},
  doi = {10.1145/268084.268189},
  abstract = {Research has been undertaken to answer the following question: Can icon-based programming languages be used to teach first year programming concepts to undergraduate students more effectively than text-based languages? BACCII++ is an iconic environment developed at Texas Tech University for teaching procedural and object-oriented programming concepts and languages. Course materials were developed and used under experimental conditions during the 1995-96 school year at Texas Tech University, with half using BACCII++ to generate C++ code, and the other half using only C++. For each course in each semester the experiment was run, the sections using BACCII++ did significantly better in overall performance.},
  timestamp = {2016-01-20T21:50:40Z},
  booktitle = {Proceedings of the {{Twenty}}-eighth {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '97},
  publisher = {{ACM}},
  author = {Calloni, Ben A. and Bagert, Donald J. and Haiduk, H. Paul},
  urldate = {2016-01-20},
  date = {1997},
  pages = {262--266},
  file = {Calloni_et_al_1997_Iconic_Programming_Proves_Effective_for_Teaching_the_First_Year_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/PIIDFKEI/Calloni_et_al_1997_Iconic_Programming_Proves_Effective_for_Teaching_the_First_Year_Programming.pdf:application/pdf}
}

@inproceedings{boustedt_threshold_2007,
  location = {{New York, NY, USA}},
  title = {Threshold {{Concepts}} in {{Computer Science}}: {{Do They Exist}} and {{Are They Useful}}?},
  isbn = {978-1-59593-361-4},
  url = {http://doi.acm.org/10.1145/1227310.1227482},
  doi = {10.1145/1227310.1227482},
  shorttitle = {Threshold {{Concepts}} in {{Computer Science}}},
  abstract = {Yes, and Yes.We are currently undertaking an pirical investigation of "Threshold Concepts" in Computer Science, with input from both instructors and students. We have found good pirical evidence that at least two concepts---Object-oriented programming and pointers--are Threshold Concepts, and that there are potentially many more others.In this paper, we present results gathered using various experimental techniques, and discuss how Threshold Concepts can affect the learning process.},
  timestamp = {2016-01-25T19:50:07Z},
  booktitle = {Proceedings of the 38th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '07},
  publisher = {{ACM}},
  author = {Boustedt, Jonas and Eckerdal, Anna and McCartney, Robert and Moström, Jan Erik and Ratcliffe, Mark and Sanders, Kate and Zander, Carol},
  urldate = {2016-01-25},
  date = {2007},
  pages = {504--508},
  keywords = {learning theory,threshold concepts},
  file = {Boustedt_et_al_2007_Threshold_Concepts_in_Computer_Science.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/NPC7GZUB/Boustedt_et_al_2007_Threshold_Concepts_in_Computer_Science.pdf:application/pdf}
}

@article{meyer_threshold_2005,
  title = {Threshold concepts and troublesome knowledge (2): {{Epistemological}} considerations and a conceptual framework for teaching and learning},
  volume = {49},
  issn = {0018-1560, 1573-174X},
  url = {http://link.springer.com/article/10.1007/s10734-004-6779-5},
  doi = {10.1007/s10734-004-6779-5},
  shorttitle = {Threshold concepts and troublesome knowledge (2)},
  abstract = {The present study builds on earlier work by Meyer and Land (2003) which introduced the generative notion of threshold concepts within (and across) disciplines, in the sense of transforming the internal view of subject matter or part thereof. In this earlier work such concepts were further linked to forms of knowledge that are ‘troublesome’, after the work of Perkins (1999). It was argued that these twinned sets of ideas may define critical moments of irreversible conceptual transformation in the educational experiences of learners, and their teachers. The present study aims (a) to examine the extent to which such phenomena can be located within personal understandings of discipline-specific epistemological discourses, (b) to develop more extensively notions of liminality within learning that were raised in the first paper, and (c) to propose a conceptual framework within which teachers may advance their own reflective practice.},
  timestamp = {2016-01-27T22:06:00Z},
  langid = {english},
  number = {3},
  journaltitle = {Higher Education},
  shortjournal = {High Educ},
  author = {Meyer, Jan H. F. and Land, Ray},
  urldate = {2016-01-27},
  date = {2005-04},
  pages = {373--388},
  keywords = {Education (general),identity,liminality,mimicry,pre-liminal variation,Psychology; general,threshold concepts,troublesome knowledge},
  file = {Meyer+Land_2005_Threshold_concepts_and_troublesome_knowledge_(2).pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/MNCKK5W2/Meyer+Land_2005_Threshold_concepts_and_troublesome_knowledge_(2).pdf:application/pdf;Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XQWFAEPD/s10734-004-6779-5.html:}
}

@inproceedings{caspersen_instructional_2007-1,
  location = {{New York, NY, USA}},
  title = {Instructional {{Design}} of a {{Programming Course}}: {{A Learning Theoretic Approach}}},
  isbn = {978-1-59593-841-1},
  url = {http://doi.acm.org/10.1145/1288580.1288595},
  doi = {10.1145/1288580.1288595},
  shorttitle = {Instructional {{Design}} of a {{Programming Course}}},
  abstract = {We present a brief overview of a model for the human cognitive architecture and three learning theories based on this model: cognitive load theory, cognitive apprenticeship, and worked examples (a key area of cognitive skill acquisition). Based on this brief overview we argue how an introductory object-oriented programming course is designed according to results of cognitive science and educational psychology in general and cognitive load theory and cognitive skill acquisition in particular; the principal techniques applied are: worked examples, scaffolding, faded guidance, cognitive apprenticeship, and emphasis of patterns to aid schema creation and improve learning. As part of the presentation of the course, we provide a characterization of model-driven programming---the approach we have adopted in the introductory programming course. The result is an introductory programming course emphasizing a pattern-based approach to programming and schema acquisition in order to improve learning.},
  timestamp = {2016-01-27T22:37:45Z},
  booktitle = {Proceedings of the {{Third International Workshop}} on {{Computing Education Research}}},
  series = {ICER '07},
  publisher = {{ACM}},
  author = {Caspersen, Michael E. and Bennedsen, Jens},
  urldate = {2016-01-27},
  date = {2007},
  pages = {111--122},
  keywords = {cognition,cognitive apprenticeship,cognitive load theory,instructional design,learning,model-driven programming,object-oriented programming,patternbased approach to programming education,worked examples},
  file = {Caspersen+Bennedsen_2007_Instructional_Design_of_a_Programming_Course.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/EMAVIQH6/Caspersen+Bennedsen_2007_Instructional_Design_of_a_Programming_Course.pdf:application/pdf}
}

@inproceedings{eckerdal_limen_2007,
  location = {{New York, NY, USA}},
  title = {From {{Limen}} to {{Lumen}}: {{Computing Students}} in {{Liminal Spaces}}},
  isbn = {978-1-59593-841-1},
  url = {http://doi.acm.org/10.1145/1288580.1288597},
  doi = {10.1145/1288580.1288597},
  shorttitle = {From {{Limen}} to {{Lumen}}},
  abstract = {This paper is part of an ongoing series of projects in which we are investigating "threshold concepts": concepts that, among other things, transforms the way a student looks as the discipline and are often troublesome to learn. The word "threshold" might imply that students cross the threshold in a single "aha" moment, but often they seem to take longer. Meyer and Land introduce the term "liminal space" for the transitional period between beginning to learn a concept and fully mastering it. Based on in-depth interviews with graduating seniors, we found that the liminal space can provide a useful metaphor for the concept learning process. In addition to observing the standard features of liminal spaces, we have identified some that may be specific to computing, specifically those relating to levels of abstraction.},
  timestamp = {2016-01-28T03:32:33Z},
  booktitle = {Proceedings of the {{Third International Workshop}} on {{Computing Education Research}}},
  series = {ICER '07},
  publisher = {{ACM}},
  author = {Eckerdal, Anna and McCartney, Robert and Moström, Jan Erik and Sanders, Kate and Thomas, Lynda and Zander, Carol},
  urldate = {2016-01-28},
  date = {2007},
  pages = {123--132},
  keywords = {learning theory,liminal space,threshold concepts},
  file = {Eckerdal_et_al_2007_From_Limen_to_Lumen.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XTVXDDIB/Eckerdal_et_al_2007_From_Limen_to_Lumen.pdf:application/pdf}
}

@inproceedings{perrenet_levels_2006,
  location = {{New York, NY, USA}},
  title = {Levels of {{Abstraction}} in {{Students}}' {{Understanding}} of the {{Concept}} of {{Algorithm}}: {{The Qualitative Perspective}}},
  isbn = {978-1-59593-055-2},
  url = {http://doi.acm.org/10.1145/1140124.1140196},
  doi = {10.1145/1140124.1140196},
  shorttitle = {Levels of {{Abstraction}} in {{Students}}' {{Understanding}} of the {{Concept}} of {{Algorithm}}},
  abstract = {In a former, mainly quantitative, study we defined four levels of abstraction in Computer Science students' thinking about the concept of algorithm. We constructed a list of questions about algorithms to measure the answering level as an indication for the thinking level. The answering level generally increased between successive year groups of Bachelor students as well as within year groups during the year, mainly from the second to the third level. The reliability of the instrument appeared to be good, but the validity remained unclear. In this current study, more qualitative methods are used to investigate the validity; the results indicate that the validity is good too. The study uses a theoretical perspective from Mathematics Education research and points at the fruitfulness of combining quantitative methods with qualitative methods.},
  timestamp = {2016-01-28T16:34:03Z},
  booktitle = {Proceedings of the 11th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  series = {ITICSE '06},
  publisher = {{ACM}},
  author = {Perrenet, Jacob and Kaasenbrood, Eric},
  urldate = {2016-01-28},
  date = {2006},
  pages = {270--274},
  keywords = {abstraction,computer science education,research methods},
  file = {Perrenet+Kaasenbrood_2006_Levels_of_Abstraction_in_Students'_Understanding_of_the_Concept_of_Algorithm.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/Q69U766W/Perrenet+Kaasenbrood_2006_Levels_of_Abstraction_in_Students'_Understanding_of_the_Concept_of_Algorithm.pdf:application/pdf}
}

@inproceedings{ma_using_2008,
  location = {{New York, NY, USA}},
  title = {Using {{Cognitive Conflict}} and {{Visualisation}} to {{Improve Mental Models Held}} by {{Novice Programmers}}},
  isbn = {978-1-59593-799-5},
  url = {http://doi.acm.org/10.1145/1352135.1352253},
  doi = {10.1145/1352135.1352253},
  abstract = {Recent research has found that many novice programmers often hold non-viable mental models of basic programming concepts such as assignment and object reference, which can limit their potential to develop programming skills. This paper proposes a constructivist-based teaching model that integrates cognitive conflict and program visualisation with the aim of supporting novice programmers in the formulation of appropriate mental models. The results of an initial empirical study produced three findings of note. Firstly, a teaching model based on either visualisation alone or cognitive conflict integrated with visualisation can help students develop viable models of value assignment. Secondly, there was evidence to suggest that cognitive conflict integrated with visualisation outperformed visualisation alone in helping students develop viable models of the more challenging concept of object reference assignment. And thirdly, there was evidence of an improvement in students' understanding of value and object reference assignment using the teaching model based on visualisation and cognitive conflict.},
  timestamp = {2016-01-28T16:34:40Z},
  booktitle = {Proceedings of the 39th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '08},
  publisher = {{ACM}},
  author = {Ma, Linxiao and Ferguson, John D. and Roper, Marc and Ross, Isla and Wood, Murray},
  urldate = {2016-01-28},
  date = {2008},
  pages = {342--346},
  keywords = {CS1,mental models,novice,programming},
  file = {Ma_et_al_2008_Using_Cognitive_Conflict_and_Visualisation_to_Improve_Mental_Models_Held_by.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/N4PRQQN5/Ma_et_al_2008_Using_Cognitive_Conflict_and_Visualisation_to_Improve_Mental_Models_Held_by.pdf:application/pdf}
}

@inproceedings{bergin_examining_2005,
  location = {{New York, NY, USA}},
  title = {Examining the {{Role}} of {{Self}}-regulated {{Learning}} on {{Introductory Programming Performance}}},
  isbn = {978-1-59593-043-9},
  url = {http://doi.acm.org/10.1145/1089786.1089794},
  doi = {10.1145/1089786.1089794},
  abstract = {The purpose of this study was to investigate the relationship between self-regulated learning (SRL) and introductory programming performance. Participants were undergraduate students enrolled in an introductory computer programming module at a third-level (post-high school) institution. The instrument used in this study was designed to assess the motivations and learning strategies (cognitive, metacognitive and resource management strategies) of college students. The data gathered was analyzed to determine if a relationship existed between self-regulation and programming performance and investigate if SRL could be used to predict performance on the module. The study found that students who perform well in programming use more metacognitive and resource management strategies than lower performing students. In addition, students who have high levels of intrinsic motivation and task value perform better in programming and use more metacognitive and resource management strategies than students with low levels of intrinsic motivation and task value. Finally, a regression model based on cognitive, metacognitive and resource management strategies was able to account for 45\% of the variance in programming performance results.},
  timestamp = {2016-01-28T16:39:26Z},
  booktitle = {Proceedings of the {{First International Workshop}} on {{Computing Education Research}}},
  series = {ICER '05},
  publisher = {{ACM}},
  author = {Bergin, Susan and Reilly, Ronan and Traynor, Desmond},
  urldate = {2016-01-28},
  date = {2005},
  pages = {81--86},
  keywords = {CS1,predictors,programming,self-regulated learning},
  file = {Bergin_et_al_2005_Examining_the_Role_of_Self-regulated_Learning_on_Introductory_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/5MQCJ6EX/Bergin_et_al_2005_Examining_the_Role_of_Self-regulated_Learning_on_Introductory_Programming.pdf:application/pdf}
}

@inproceedings{bennedssen_abstraction_2008,
  location = {{New York, NY, USA}},
  title = {Abstraction {{Ability As}} an {{Indicator}} of {{Success}} for {{Learning Computing Science}}?},
  isbn = {978-1-60558-216-0},
  url = {http://doi.acm.org/10.1145/1404520.1404523},
  doi = {10.1145/1404520.1404523},
  abstract = {Computing scientists generally agree that abstract thinking is a crucial component for practicing computer science. We report on a three-year longitudinal study to confirm the hypothesis that general abstraction ability has a positive impact on performance in computing science. Abstraction ability is operationalized as stages of cognitive development for which validated tests exist. Performance in computing science is operationalized as grade in the final assessment of ten courses of a bachelor's degree programme in computing science. The validity of the operationalizations is discussed. We have investigated the positive impact overall, for two groupings of courses (a content-based grouping and a grouping based on SOLO levels of the courses' intended learning outcome), and for each individual course. Surprisingly, our study shows that there is hardly any correlation between stage of cognitive development (abstraction ability) and final grades in standard CS courses, neither for the various group-ings, nor for the individual courses. Possible explanations are discussed.},
  timestamp = {2016-01-28T16:42:40Z},
  booktitle = {Proceedings of the {{Fourth International Workshop}} on {{Computing Education Research}}},
  series = {ICER '08},
  publisher = {{ACM}},
  author = {Bennedssen, Jens and Caspersen, Michael E.},
  urldate = {2016-01-28},
  date = {2008},
  pages = {15--26},
  keywords = {abstraction,Computer science,CS,indicator,learning,success},
  file = {Bennedssen+Caspersen_2008_Abstraction_Ability_As_an_Indicator_of_Success_for_Learning_Computing_Science.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/9V25HJKK/Bennedssen+Caspersen_2008_Abstraction_Ability_As_an_Indicator_of_Success_for_Learning_Computing_Science.pdf:application/pdf}
}

@inproceedings{murphy_multiinstitutional_2005,
  location = {{New York, NY, USA}},
  title = {A {{Multi}}-institutional {{Investigation}} of {{Computer Science Seniors}}' {{Knowledge}} of {{Programming Concepts}}},
  isbn = {978-1-58113-997-6},
  url = {http://doi.acm.org/10.1145/1047344.1047505},
  doi = {10.1145/1047344.1047505},
  abstract = {Research on learning suggests the importance of helping students organize their knowledge around meaningful patterns of information. This paper reports on a multi-institutional study to investigate how senior computer science majors articulate and organize their knowledge of programming concepts using a card-sorting technique adopted from knowledge acquisition. We show that card-sorts are an effective means of eliciting students' knowledge structures and suggest they can also be used to help students organize their knowledge throughout the curriculum.},
  timestamp = {2016-01-28T16:44:36Z},
  booktitle = {Proceedings of the 36th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '05},
  publisher = {{ACM}},
  author = {Murphy, Laurie and McCauley, Renée and Westbrook, Suzanne and Fossum, Timothy and Haller, Susan and Morrison, Briana B. and Richards, Brad and Sanders, Kate and Zander, Carol and Anderson, Ruth E.},
  urldate = {2016-01-28},
  date = {2005},
  pages = {510--514},
  keywords = {card sort,content analysis,expertise,knowledge},
  file = {Murphy_et_al_2005_A_Multi-institutional_Investigation_of_Computer_Science_Seniors'_Knowledge_of.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/HSJ8GA4H/Murphy_et_al_2005_A_Multi-institutional_Investigation_of_Computer_Science_Seniors'_Knowledge_of.pdf:application/pdf}
}

@article{paas_cognitive_2003,
  title = {Cognitive load theory and instructional design: {{Recent}} developments},
  volume = {38},
  url = {http://www.tandfonline.com/doi/pdf/10.1207/S15326985EP3801_1},
  shorttitle = {Cognitive load theory and instructional design},
  timestamp = {2016-02-02T03:00:34Z},
  number = {1},
  journaltitle = {Educational psychologist},
  shortjournal = {Educ. Psychol.},
  author = {Paas, Fred and Renkl, Alexander and Sweller, John},
  urldate = {2016-02-02},
  date = {2003},
  pages = {1--4},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/AK5348P3/S15326985EP3801_1.html:;Paas_et_al_2003_Cognitive_load_theory_and_instructional_design.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/AZ2JGZ99/Paas_et_al_2003_Cognitive_load_theory_and_instructional_design.pdf:application/pdf}
}

@article{litzinger_cognitive_2010,
  title = {A {{Cognitive Study}} of {{Problem Solving}} in {{Statics}}},
  volume = {99},
  url = {www.summon.com},
  abstract = {Even as expectations for engineers continue to evolve to meet global challenges, analytical problem solving remains a central skill. Thus, improving students' analytical problem solving skills remains an important goal in engineering education. This study involves observation of students as they execute the initial steps of an engineering problem solving process in statics. (1) What knowledge elements do statics students have the greatest difficulty applying during problem solving? (2) Are there differences in the knowledge elements that are accurately applied by strong and weak statics students? (3) Are there differences in the cognitive and metacognitive strategies used by strong and weak statics students during analysis? These questions were addressed using think-aloud sessions during which students solved typical textbook problems. We selected the work of twelve students for detailed analysis, six weak and six strong problem solvers, using an extreme groups split based on scores on the think-aloud problems and a course exam score. The think-aloud data from the two sets of students were analyzed to identify common technical errors and also major differences in the problem solving processes. We found that the weak, and most of the strong problem solvers relied heavily on memory to decide what reactions were present at a given connection, and few of the students could reason physically about what reactions should be present. Furthermore, the cognitive analysis of the students' problems solving processes revealed substantial differences in the use of self-explanation by weak and strong students. {[}PUBLICATION ABSTRACT]; BACKGROUND Even as expectations for engineers continue to evolve to meet global challenges, analytical problem solving remains a central skill. Thus, improving students' analytical problem solving skills remains an important goal in engineering education. This study involves observation of students as they execute the initial steps of an engineering problem solving process in statics. PURPOSE (HYPOTHESIS) (1) What knowledge elements do statics students have the greatest difficulty applying during problem solving? (2) Are there differences in the knowledge elements that are accurately applied by strong and weak statics students? (3) Are there differences in the cognitive and metacognitive strategies used by strong and weak statics students during analysis? DESIGN/METHOD These questions were addressed using think-aloud sessions during which students solved typical textbook problems. We selected the work of twelve students for detailed analysis, six weak and six strong problem solvers, using an extreme groups split based on scores on the think-aloud problems and a course exam score. The think-aloud data from the two sets of students were analyzed to identify common technical errors and also major differences in the problem solving processes. CONCLUSIONS We found that the weak, and most of the strong problem solvers relied heavily on memory to decide what reactions were present at a given connection, and few of the students could reason physically about what reactions should be present. Furthermore, the cognitive analysis of the students' problems solving processes revealed substantial differences in the use of self-explanation by weak and strong students.},
  timestamp = {2016-02-02T12:31:17Z},
  langid = {english},
  number = {4},
  journaltitle = {Journal of Engineering Education},
  shortjournal = {J. Eng. Educ.},
  author = {Litzinger, TA and Van Meter, P. and Firetto, CM and Passmore, LJ and Masters, CB and Turns, SR and Gray, GL and Costanzo, F. and Zappe, SE},
  date = {2010},
  pages = {337--337},
  keywords = {CATEGORIZATION,cognitive,Data collection,education,EDUCATION & EDUCATIONAL RESEARCH,ENGINEERING,Engineering research,Engineers,EXAMPLES,EXPERTS,Mathematical models,MATHEMATICS,METACOGNITION,metacognitive,MULTIDISCIPLINARY,NOVICES,PHYSICS,PROBLEM SOLVERS,problem solving,SCIENTIFIC DISCIPLINES,SELF-EXPLANATION,Students,Studies}
}

@book{bransford_how_2000,
  title = {How people learn},
  timestamp = {2016-02-02T12:34:40Z},
  publisher = {{Washington, DC: National Academy Press}},
  author = {Bransford, John D and Brown, Ann L and Cocking, Rodney R and {others}},
  date = {2000},
  keywords = {Learning,Psychology of,Social aspects}
}

@incollection{ambrose_chapter_2010,
  title = {Chapter 4: {{How Do Students Develop Mastery}}?},
  timestamp = {2016-02-02T12:34:40Z},
  booktitle = {How learning works: {{Seven}} research-based principles for smart teaching},
  publisher = {{John Wiley \& Sons}},
  author = {Ambrose, Susan A and Bridges, Michael W and DiPietro, Michele and Lovett, Marsha C and Norman, Marie K},
  date = {2010},
  pages = {91--120}
}

@article{slotta_helping_2006,
  title = {Helping {{Students Understand Challenging Topics}} in {{Science Through Ontology Training}}},
  volume = {24},
  issn = {0737-0008},
  url = {http://dx.doi.org/10.1207/s1532690xci2402_3},
  doi = {10.1207/s1532690xci2402_3},
  abstract = {Chi (2005) proposed that students experience difficulty in learning about physics concepts such as light, heat, or electric current because they attribute to these concepts an inappropriate ontological status of material substances rather than the more veridical status of emergent processes. Conceptual change could thus be facilitated by training students in the appropriate ontology prior to physics instruction. We tested this prediction by developing a computer-based module whereby participants learned about emergent processes. Control participants completed a computer-based task that was uninformative with respect to ontology. Both groups then studied a physics text concerned with electricity, including explanations and a posttest. Verbal explanations and qualitative problem solutions revealed that experimental students gained a deeper understanding of electric current.},
  timestamp = {2016-02-02T12:46:23Z},
  number = {2},
  journaltitle = {Cognition and Instruction},
  shortjournal = {Cogn. Instr.},
  author = {Slotta, James D. and Chi, Michelene T. H.},
  urldate = {2016-02-02},
  date = {2006-06-01},
  pages = {261--289},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/WWHZDU8X/s1532690xci2402_3.html:}
}

@article{pellegrino_rethinking_2006,
  title = {Rethinking and redesigning curriculum, instruction and assessment: {{What}} contemporary research and theory suggests},
  timestamp = {2015-10-25T21:07:28Z},
  journaltitle = {commissioned by the National Center on Education and the Economy for the New Commission on the Skills of the American Workforce},
  shortjournal = {Comm. Natl. Cent. Educ. Econ. New Comm. Ski. Am. Workforce},
  author = {Pellegrino, James W},
  date = {2006}
}

@incollection{pellegrino_science_2014,
  location = {{New York, NY}},
  title = {The {{Science}} and {{Design}} of {{Assessment}} in {{Engineering Education}}},
  timestamp = {2015-10-25T21:07:28Z},
  booktitle = {Cambridge handbook of engineering education research},
  publisher = {{Cambridge University Press}},
  author = {Pellegrino, James W and DiBello, Louis V and Brophy, Sean P},
  date = {2014},
  pages = {571--595}
}

@article{felder_designing_2003,
  title = {Designing and teaching courses to satisfy the {{ABET}} engineering criteria},
  volume = {92},
  url = {http://www1.me.metu.edu.tr/odk/kaynak/JEE-V92n1(January2003)pp7-24.pdf},
  timestamp = {2015-10-25T21:07:28Z},
  number = {1},
  journaltitle = {JOURNAL OF ENGINEERING EDUCATION-WASHINGTON-},
  shortjournal = {J. Eng. Educ.-Wash.-},
  author = {Felder, Richard M. and Brent, Rebecca},
  urldate = {2015-10-13},
  date = {2003},
  pages = {7--26},
  keywords = {alignment,curriculum design,FRAMEWORK}
}

@article{biggs_enhancing_1996,
  title = {Enhancing teaching through constructive alignment},
  volume = {32},
  issn = {0018-1560, 1573-174X},
  url = {http://link.springer.com/article/10.1007/BF00138871},
  doi = {10.1007/BF00138871},
  timestamp = {2015-10-07T18:24:15Z},
  langid = {english},
  number = {3},
  journaltitle = {Higher Education},
  shortjournal = {High Educ},
  author = {Biggs, John},
  urldate = {2015-10-07},
  date = {1996-10},
  pages = {347--364},
  keywords = {Education (general),Psychology; general},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/2QZK9MSJ/BF00138871.html:}
}

@article{jamieson_creating_2009,
  title = {Creating a {{Culture}} for {{Scholarly}} and {{Systematic Innovation}} in {{Engineering Education}}: {{Ensuring US}} engineering has the right people with the right talent for a global society},
  timestamp = {2015-10-28T01:34:24Z},
  journaltitle = {American Society of Engineering Educators (ASEE)},
  shortjournal = {Am. Soc. Eng. Educ. ASEE},
  author = {Jamieson, Leah H and Lohmann, Jack R},
  date = {2009},
  keywords = {change,how people learn,research to practice cycle}
}

@inproceedings{traynor_synthesis_2005,
  location = {{New York, NY, USA}},
  title = {Synthesis and {{Analysis}} of {{Automatic Assessment Methods}} in {{CS1}}: {{Generating Intelligent MCQs}}},
  isbn = {978-1-58113-997-6},
  url = {http://doi.acm.org/10.1145/1047344.1047502},
  doi = {10.1145/1047344.1047502},
  shorttitle = {Synthesis and {{Analysis}} of {{Automatic Assessment Methods}} in {{CS1}}},
  abstract = {This paper describes the use of random code generation and mutation as a method for synthesising multiple choice questions which can be used in automated assessment. Whilst using multiple choice questions has proved to be a feasible method of testing if students have suitable knowledge or comprehension of a programming concept, creating suitable multiple choice questions that accurately test the students' knowledge is time intensive.This paper proposes two methods of generating code which can then be used to closely examine the comprehension ability of students. The first method takes as input a suite of template programs, and performs slight mutations on each program and ask students to comprehend the new program. The second method performs traversals on a syntax tree of possible programs, yielding slightly erratic but compilable code, again with behaviour that students can be questioned about. As well as generating code these methods also yield alternative distracting answers to challenge the students. Finally, this paper discusses the gradual introduction of these automatically generated questions as an assessment method and discusses the relative merits of each technique.},
  timestamp = {2016-01-20T21:06:25Z},
  booktitle = {Proceedings of the 36th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '05},
  publisher = {{ACM}},
  author = {Traynor, Des and Gibson, J. Paul},
  urldate = {2016-01-20},
  date = {2005},
  pages = {495--499},
  keywords = {assessment,first year programming,program comprehension},
  file = {Traynor+Gibson_2005_Synthesis_and_Analysis_of_Automatic_Assessment_Methods_in_CS1.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/9HN736XH/Traynor+Gibson_2005_Synthesis_and_Analysis_of_Automatic_Assessment_Methods_in_CS1.pdf:application/pdf}
}

@inproceedings{lister_blooming_2000,
  location = {{New York, NY, USA}},
  title = {On {{Blooming First Year Programming}}, and {{Its Blooming Assessment}}},
  isbn = {978-1-58113-271-7},
  url = {http://doi.acm.org/10.1145/359369.359393},
  doi = {10.1145/359369.359393},
  abstract = {The traditional approach to introductory programming has students writing complete programs, as early as possible. Also, the traditional emphasis is on the technology, not the explicit cognitive development of the student. This approach jumps to the fifth and sixth levels of Bloom's Taxonomy of Educational Objectives, when these last two levels depend upon competence in the first four levels. I describe my alternative approach that addresses the six stages in sequence, emphasising effective assessment processes for the first four levels.},
  timestamp = {2016-01-20T22:04:50Z},
  booktitle = {Proceedings of the {{Australasian Conference}} on {{Computing Education}}},
  series = {ACSE '00},
  publisher = {{ACM}},
  author = {Lister, Raymond},
  urldate = {2016-01-20},
  date = {2000},
  pages = {158--162},
  keywords = {assessment,blooms taxonomy,cognitive development},
  file = {Lister_2000_On_Blooming_First_Year_Programming,_and_Its_Blooming_Assessment.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/8DRJE886/Lister_2000_On_Blooming_First_Year_Programming,_and_Its_Blooming_Assessment.pdf:application/pdf}
}

@article{lister_ten_2011,
  title = {Ten {{Years After}} the {{McCracken Working Group}}},
  volume = {2},
  issn = {2153-2184},
  url = {http://doi.acm.org/10.1145/2038876.2038882},
  doi = {10.1145/2038876.2038882},
  timestamp = {2016-01-20T22:28:02Z},
  number = {4},
  journaltitle = {ACM Inroads},
  shortjournal = {ACM Inroads},
  author = {Lister, Raymond},
  urldate = {2016-01-20},
  date = {2011-12},
  pages = {18--19},
  file = {Lister_2011_Ten_Years_After_the_McCracken_Working_Group.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/JHNGNSHF/Lister_2011_Ten_Years_After_the_McCracken_Working_Group.pdf:application/pdf}
}

@inproceedings{sheard_exploring_2011,
  location = {{New York, NY, USA}},
  title = {Exploring {{Programming Assessment Instruments}}: {{A Classification Scheme}} for {{Examination Questions}}},
  isbn = {978-1-4503-0829-8},
  url = {http://doi.acm.org/10.1145/2016911.2016920},
  doi = {10.1145/2016911.2016920},
  shorttitle = {Exploring {{Programming Assessment Instruments}}},
  abstract = {This paper describes the development of a classification scheme that can be used to investigate the characteristics of introductory programming examinations. We describe the process of developing the scheme, explain its categories, and present a taste of the results of a pilot analysis of a set of CS1 exam papers. This study is part of a project that aims to investigate the nature and composition of formal examination instruments used in the summative assessment of introductory programming students, and the pedagogical intentions of the educators who construct these instruments.},
  timestamp = {2016-01-20T22:28:57Z},
  booktitle = {Proceedings of the {{Seventh International Workshop}} on {{Computing Education Research}}},
  series = {ICER '11},
  publisher = {{ACM}},
  author = {Sheard, Judy and {Simon} and Carbone, Angela and Chinn, Donald and Laakso, Mikko-Jussi and Clear, Tony and de Raadt, Michael and D'Souza, Daryl and Harland, James and Lister, Raymond and Philpott, Anne and Warburton, Geoff},
  urldate = {2016-01-20},
  date = {2011},
  pages = {33--38},
  keywords = {CS1,examination papers,introductory programming},
  options = {useprefix=true},
  file = {Sheard_et_al_2011_Exploring_Programming_Assessment_Instruments.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/ECECQXZ6/Sheard_et_al_2011_Exploring_Programming_Assessment_Instruments.pdf:application/pdf}
}

@inproceedings{lister_objectives_2001,
  location = {{New York, NY, USA}},
  title = {Objectives and {{Objective Assessment}} in {{CS1}}},
  isbn = {978-1-58113-329-5},
  url = {http://doi.acm.org/10.1145/364447.364605},
  doi = {10.1145/364447.364605},
  abstract = {When designing a first semester "CS1" programming subject, I advocate "truth in sentencing". That is, the objectives should be explicit, and the assessment tasks should reflect the objectives. This may appear to be a statement of the obvious, but few subjects satisfy these criteria. The traditional CS1 approach is to set students the task of writing extensive code, as early as possible. On closer inspection of such subjects, one finds marking schemes for exams and assignments that are generous to the point of being inconsistent with the subject objectives. Instead, students should not write any original code in CS1, and should be examined by multiple choice question.},
  timestamp = {2016-01-20T22:30:46Z},
  booktitle = {Proceedings of the {{Thirty}}-second {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '01},
  publisher = {{ACM}},
  author = {Lister, Raymond},
  urldate = {2016-01-20},
  date = {2001},
  pages = {292--296},
  keywords = {alignment,learning objectives},
  file = {Lister_2001_Objectives_and_Objective_Assessment_in_CS1.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/XVSSJQ44/Lister_2001_Objectives_and_Objective_Assessment_in_CS1.pdf:application/pdf}
}

@article{dehnadi_camel_2006,
  title = {The camel has two humps (working title)},
  url = {http://eis.sla.mdx.ac.uk/research/PhDArea/saeed/paper1.pdf},
  timestamp = {2015-12-11T19:15:16Z},
  journaltitle = {Middlesex University, UK},
  shortjournal = {Middx. Univ. UK},
  author = {Dehnadi, Saeed and Bornat, Richard},
  urldate = {2015-12-11},
  date = {2006},
  pages = {1--21},
  file = {Dehnadi+Bornat_2006_The_camel_has_two_humps_(working_title).pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/8PWMNQQF/Dehnadi+Bornat_2006_The_camel_has_two_humps_(working_title).pdf:application/pdf}
}

@article{ensmenger_making_2010,
  title = {Making programming masculine},
  url = {http://homes.soic.indiana.edu/nensmeng/files/ensmenger-gender.pdf},
  timestamp = {2015-12-12T22:15:35Z},
  journaltitle = {Gender Codes: Why women are leaving computing},
  shortjournal = {Gend. Codes Why Women Are Leaving Comput.},
  author = {Ensmenger, Nathan},
  urldate = {2015-12-12},
  date = {2010},
  pages = {115--141},
  keywords = {gender,masculinity,Programming},
  file = {Ensmenger_2010_Making_programming_masculine.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/6DTI65PD/Ensmenger_2010_Making_programming_masculine.pdf:application/pdf}
}

@article{hicks_meritocracy_2010,
  title = {Meritocracy and {{Feminization}} in {{Conflict}}: {{Computerization}} in the {{British Government}}},
  url = {http://iit.edu/~mhicks1/writing/GenderCodesIllus.pdf},
  shorttitle = {Meritocracy and {{Feminization}} in {{Conflict}}},
  timestamp = {2015-12-12T22:16:23Z},
  journaltitle = {Misa, TJ eds},
  shortjournal = {Misa TJ Eds},
  author = {Hicks, Marie},
  urldate = {2015-12-12},
  date = {2010},
  pages = {95--114},
  file = {Hicks_2010_Meritocracy_and_Feminization_in_Conflict.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/2WWMT6EH/Hicks_2010_Meritocracy_and_Feminization_in_Conflict.pdf:application/pdf}
}

@book{kelty_two_2008,
  location = {{Durham}},
  title = {Two {{Bits}}: {{The Cultural Significance}} of {{Free Software}}},
  url = {http://twobits.net/download/index.html},
  timestamp = {2015-12-13T20:07:44Z},
  publisher = {{Duke University Press}},
  author = {Kelty, Christopher},
  urldate = {2015-12-13},
  date = {2008},
  file = {Download_-_Two_Bits.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/43S5625E/Download_-_Two_Bits.pdf:application/pdf;Download - Two Bits:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/FGKIRHAD/index.html:}
}

@online{sydell_forgotten_2014,
  title = {The {{Forgotten Female Programmers Who Created Modern Tech}}},
  url = {http://www.npr.org/sections/alltechconsidered/2014/10/06/345799830/the-forgotten-female-programmers-who-created-modern-tech},
  abstract = {The Innovators, Walter Isaacson's new book, tells the stories of the people who created modern computers. Women, who are now a minority in computer science, played an outsize role in that history.},
  timestamp = {2015-12-13T21:53:53Z},
  titleaddon = {NPR.org},
  type = {radio program transcript},
  author = {Sydell, Laura},
  urldate = {2015-12-13},
  date = {2014},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/3JXHFQW4/the-forgotten-female-programmers-who-created-modern-tech.html:}
}

@book{hammerman_adas_2015,
  title = {Ada's {{Legacy}}: {{Cultures}} of {{Computing}} from the {{Victorian}} to the {{Digital Age}}},
  isbn = {978-1-970001-51-8},
  pagetotal = {262},
  timestamp = {2015-12-14T23:46:53Z},
  publisher = {{Morgan \& Claypool Publishers-ACM}},
  author = {Hammerman, Robin and Russell, Andrew L.},
  date = {2015-10-01}
}

@book{abbate_recoding_2012,
  title = {Recoding gender: women's changing participation in computing},
  url = {https://books.google.com/books?hl=en&lr=&id=GWOIXDsLQWwC&oi=fnd&pg=PR2&dq=Recoding+Gender&ots=ViHeQ3f7vg&sig=9ch8MMZsCFY6HDwaJa_wBB0Ol1g},
  shorttitle = {Recoding gender},
  timestamp = {2015-12-14T23:53:22Z},
  publisher = {{MIT Press}},
  author = {Abbate, Janet},
  urldate = {2015-12-14},
  date = {2012},
  file = {Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/87KMZ96F/books.html:}
}

@book{isaacson_innovators_2014,
  title = {The innovators: {{How}} a group of hackers, geniuses, and geeks created the digital revolution},
  shorttitle = {The innovators},
  timestamp = {2015-12-15T00:54:37Z},
  publisher = {{Simon \& Schuster}},
  author = {Isaacson, Walter},
  date = {2014},
  file = {Isaacson_1958_The_innovators.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/D89XVQEF/Isaacson_1958_The_innovators.pdf:application/pdf}
}

@article{blum_evolving_2005,
  title = {The {{Evolving Culture}} of {{Computing}}: {{Similarity Is}} the {{Difference}}},
  volume = {26},
  issn = {1536-0334},
  url = {http://muse.jhu.edu/content/crossref/journals/frontiers/v026/26.1blum.html},
  doi = {10.1353/fro.2005.0002},
  shorttitle = {The {{Evolving Culture}} of {{Computing}}},
  timestamp = {2016-01-22T03:46:54Z},
  langid = {english},
  number = {1},
  journaltitle = {Frontiers: A Journal of Women Studies},
  shortjournal = {Front. J. Women Stud.},
  author = {Blum, Lenore and Frieze, Carol},
  urldate = {2016-01-22},
  date = {2005},
  pages = {110--125},
  file = {Blum+Frieze_2005_The_Evolving_Culture_of_Computing.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/32Z6SDC8/Blum+Frieze_2005_The_Evolving_Culture_of_Computing.pdf:application/pdf}
}

@inproceedings{thomas_code_2003,
  location = {{New York, NY, USA}},
  title = {Code {{Warriors}} and {{Code}}-a-phobes: {{A Study}} in {{Attitude}} and {{Pair Programming}}},
  isbn = {978-1-58113-648-7},
  url = {http://doi.acm.org/10.1145/611892.612007},
  doi = {10.1145/611892.612007},
  shorttitle = {Code {{Warriors}} and {{Code}}-a-phobes},
  abstract = {This paper reports on how first-year students who have programmed before see their programming interest and ability and how this self-perception relates to their performance in the introductory programming course. In particular we examine how this self-perception is reflected in their reactions to the pair-programming technique for developing software.Students who had programming experience before University were given a survey that placed them on a scale that we have called Code Warrior to Code-a-phobe. We then placed them in 'opposite' and 'similar' pairs for a pair programming exercise and surveyed their reactions. There was evidence that students who have considerable self-confidence do not enjoy the experience of pair programming as much as other students and that students produce their best work when placed in pairs with students of similar self-confidence levels.},
  timestamp = {2016-01-20T21:46:49Z},
  booktitle = {Proceedings of the 34th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '03},
  publisher = {{ACM}},
  author = {Thomas, Lynda and Ratcliffe, Mark and Robertson, Ann},
  urldate = {2016-01-20},
  date = {2003},
  pages = {363--367},
  keywords = {closed labs,CS1,first year programming,pair programming,self-confidence},
  file = {Thomas_et_al_2003_Code_Warriors_and_Code-a-phobes.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/JA8GCWXC/Thomas_et_al_2003_Code_Warriors_and_Code-a-phobes.pdf:application/pdf}
}

@online{_results,
  title = {Results {{ACM DL}} :~first year programming},
  url = {http://dl.acm.org/results.cfm?within=recurringEvents.recurringEventID%3DRE175&withindisp=CSE&query=first+year+programming&Go.x=0&Go.y=0},
  timestamp = {2016-01-20T21:50:21Z},
  urldate = {2016-01-20},
  file = {Results ACM DL \: first year programming:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/DC4AX4TN/results.html:}
}

@article{mckenna_transparent_2000,
  title = {Transparent and opaque boxes: do women and men have different computer programming psychologies and styles?},
  volume = {35},
  issn = {0360-1315},
  url = {http://www.sciencedirect.com/science/article/pii/S0360131500000178},
  doi = {10.1016/S0360-1315(00)00017-8},
  shorttitle = {Transparent and opaque boxes},
  abstract = {An orthodox ‘hard mastery’ programming style is a cornerstone of Sherry Turkle’s influential psychoanalysis of different approaches to learning and practice in computer programming. Hard mastery consists of planning and design, documentation, structure, functional and data abstraction, and debugging, in the development of programs. Turkle is concerned that teachers of programming are trained to recognise hard mastery as the only real way to program, whereas it is only ‘male mastery’. To bring women into computing, teachers are told to teach or facilitate the development of soft, hacking styles. This paper argues that this was a misconceived and impossible aspiration whose widespread influence has led, instead, to a deepening of perceptions of programming and computing as a masculine culture, and to the implicit and absurd identification of women as innately unsuited to the skills required for large programming projects in real organisations.},
  timestamp = {2016-01-21T17:41:44Z},
  number = {1},
  journaltitle = {Computers \& Education},
  shortjournal = {Computers \& Education},
  author = {McKenna, Peter},
  urldate = {2016-01-21},
  date = {2000-08-01},
  pages = {37--49},
  keywords = {Gender studies,Programming and programming languages,Teaching/learning strategies},
  file = {McKenna_2000_Transparent_and_opaque_boxes.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/5CJ5IGDQ/McKenna_2000_Transparent_and_opaque_boxes.pdf:application/pdf;ScienceDirect Snapshot:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/JK5CKATE/S0360131500000178.html:}
}

@inproceedings{dupras_thoughts_1984,
  location = {{New York, NY, USA}},
  title = {Some {{Thoughts}} on {{Teaching First Year Programming}}},
  isbn = {978-0-89791-126-9},
  url = {http://doi.acm.org/10.1145/800039.808641},
  doi = {10.1145/800039.808641},
  abstract = {Teaching programming to first year classes is most often considered a matter of minor importance. We think otherwise. This paper expresses our viewpoint on the matter and reports on an experiment supporting our viewpoint.},
  timestamp = {2016-01-20T21:51:13Z},
  booktitle = {Proceedings of the {{Fifteenth SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGSCE '84},
  publisher = {{ACM}},
  author = {Dupras, Marcel and LeMay, Fernand and Mili, Ali},
  urldate = {2016-01-20},
  date = {1984},
  pages = {148--153},
  keywords = {Computer Science Curriculum,program correctness,Teaching programming},
  file = {Dupras_et_al_1984_Some_Thoughts_on_Teaching_First_Year_Programming.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/FP5IT49E/Dupras_et_al_1984_Some_Thoughts_on_Teaching_First_Year_Programming.pdf:application/pdf}
}

@inproceedings{astrachan_why_2004,
  location = {{New York, NY, USA}},
  title = {Why {{I Care About Programming}} and {{How}} to {{Teach It}}},
  isbn = {978-1-58113-798-9},
  url = {http://doi.acm.org/10.1145/971300.971302},
  doi = {10.1145/971300.971302},
  abstract = {This is the thirty-fifth SIGCSE conference. Off-by-one bugs notwithstanding, it seems safe to assume that the members of the SIGCSE community have been teaching programming for at least 35 years. Have we improved the teaching of programming in that time? We have changed languages, we have occasionally changed paradigms, and the platform we use to teach programming is effectively infinitely more powerful than it was 35 years ago. However, if we use the SIGCSE proceedings as a snapshot of the state-of-the-art in teaching programming, it's possible to take a view that "the more things change the more they remain the same." In this talk I'll review what the community has had to say about teaching programming and what it is saying today. The community does not always speak in one voice, but there are established trends that illuminate what we as a community view as important. In 1974 David Gries discussed how we should teach programming and used this analogy: "Suppose you attend a course in cabinet making. The instructor briefly shows you a saw, a plane, a hammer, and a few other tools, letting you use each one for a few minutes. He next shows you a beautifully-finished cabinet. Finally, he tells you to design and build your own cabinet and bring him the finished product in a few weeks. You would think he was crazy!" As part of this talk I will demonstrate how I teach program-building and why I think that if we do not program in front of our students we cannot effectively teach programming. I hope to convince you that programming should be taught by demonstration and that I am not crazy.},
  timestamp = {2016-01-20T21:52:21Z},
  booktitle = {Proceedings of the 35th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '04},
  publisher = {{ACM}},
  author = {Astrachan, Owen},
  urldate = {2016-01-20},
  date = {2004},
  pages = {235--235},
  file = {Astrachan_2004_Why_I_Care_About_Programming_and_How_to_Teach_It.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/8V9N2WM8/Astrachan_2004_Why_I_Care_About_Programming_and_How_to_Teach_It.pdf:application/pdf}
}

@inproceedings{bruce_introducing_2010,
  location = {{New York, NY, USA}},
  title = {Introducing {{Concurrency}} in {{CS}} 1},
  isbn = {978-1-4503-0006-3},
  url = {http://doi.acm.org/10.1145/1734263.1734341},
  doi = {10.1145/1734263.1734341},
  abstract = {Because of the growing importance of concurrent programming, many people are trying to figure out where in the curriculum to introduce students to concurrency. In this paper we discuss the use of concurrency in an introductory computer science course. This course, which has been taught for ten years, introduces concurrency in the context of event-driven programming. It also makes use of graphics and animations with the support of a library that reduces the syntactic overhead of using these constructs. Students learn to use separate threads in a way that enables them to write programs that match their intuitions of the world. While the separate threads do interact, programs are selected so that race conditions are generally not an issue.},
  timestamp = {2016-01-20T22:02:21Z},
  booktitle = {Proceedings of the 41st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '10},
  publisher = {{ACM}},
  author = {Bruce, Kim B. and Danyluk, Andrea and Murtagh, Thomas},
  urldate = {2016-01-20},
  date = {2010},
  pages = {224--228},
  keywords = {ASEE2016/newtopics,concurrency,cs 1,java,objectdraw},
  file = {Bruce_et_al_2010_Introducing_Concurrency_in_CS_1.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/57AI489M/Bruce_et_al_2010_Introducing_Concurrency_in_CS_1.pdf:application/pdf}
}

@inproceedings{wood_building_2015,
  location = {{New York, NY, USA}},
  title = {Building {{Worlds}}: {{Bridging Imperative-First}} and {{Object-Oriented Programming}} in {{CS1-CS2}}},
  isbn = {978-1-4503-2966-8},
  url = {http://doi.acm.org/10.1145/2676723.2677249},
  doi = {10.1145/2676723.2677249},
  shorttitle = {Building {{Worlds}}},
  abstract = {When teaching introductory computing courses, we are often guilty of writing rudimentary programming assignments - those meant to illustrate one simple language feature, comprised mostly of code that will never be used beyond the assignment. Admittedly, first-year computing students must navigate a myriad of challenges, sometimes learning both imperative and object-oriented programming, in addition to mastering syntax, logic,debugging, and testing. To tackle the difficulties of developing CS 1 and CS 2 courses that engage students in learning while addressing the numerous course objectives, we chose to challenge students to create virtual worlds in one large comprehensive two-quarter long programming project. Students were granted creative freedom within a framework that gradually introduced many programming skills and that required the mastery of object-oriented programming and some engaging algorithms. We present the curriculum, performance comparisons, and observations. Overall, we consider the experimental courses a success that will have an impact on our department's future curricular offerings.},
  timestamp = {2016-01-21T17:57:06Z},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '15},
  publisher = {{ACM}},
  author = {Wood, Zoë and Keen, Aaron},
  urldate = {2016-01-21},
  date = {2015},
  pages = {144--149},
  keywords = {ASEE2016/x vs OOP,object-oriented programming},
  file = {Wood+Keen_2015_Building_Worlds.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/45N22GK4/Wood+Keen_2015_Building_Worlds.pdf:application/pdf}
}

@inproceedings{vilner_fundamental_2007,
  location = {{New York, NY, USA}},
  title = {Fundamental {{Concepts}} of {{CS1}}: {{Procedural}} vs. {{Object Oriented Paradigm}} - a {{Case Study}}},
  isbn = {978-1-59593-610-3},
  url = {http://doi.acm.org/10.1145/1268784.1268835},
  doi = {10.1145/1268784.1268835},
  shorttitle = {Fundamental {{Concepts}} of {{CS1}}},
  abstract = {For some time, there has been an ongoing debate among Computer Science (CS) educators about the advantages and disadvantages of the shift from the procedural to the Object-Oriented (OO) paradigm. In our institution, we decided to implement this shift in the year 2005, when we changed our introductory course and started, right from the beginning, to teach the Java language, instead of the procedural facet of C++. While we still offered the two different paradigms in parallel, we had two similar groups each taking one of the paradigms. These two groups served as the research population of the study we describe in this paper. We examined whether the shift from the procedural to the OO paradigm had an effect on students' perception of fundamental concepts taught in the introductory course.},
  timestamp = {2016-01-21T17:58:10Z},
  booktitle = {Proceedings of the 12th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  series = {ITiCSE '07},
  publisher = {{ACM}},
  author = {Vilner, Tamar and Zur, Ela and Gal-Ezer, Judith},
  urldate = {2016-01-21},
  date = {2007},
  pages = {171--175},
  keywords = {ASEE2016/x vs OOP,CS1,OOP paradigm,procedural paradigm},
  file = {Vilner_et_al_2007_Fundamental_Concepts_of_CS1.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/I8PVE4CP/Vilner_et_al_2007_Fundamental_Concepts_of_CS1.pdf:application/pdf}
}

@inproceedings{ginat_constructive_2013,
  location = {{New York, NY, USA}},
  title = {Constructive {{Use}} of {{Errors}} in {{Teaching CS1}}},
  isbn = {978-1-4503-1868-6},
  url = {http://doi.acm.org/10.1145/2445196.2445300},
  doi = {10.1145/2445196.2445300},
  abstract = {We developed an approach of learning from errors in CS1, taught in OOP. The approach is based on a set of principles, which include: cognitive conflict, constructivist characteristics, error attribution, self explanation, reflection, and refinement of concept images of fundamental OOP terms and mechanisms. The approach is presented, and some of its activities are illustrated. The developed activities aim at erroneous OOP conceptions that we have observed in a previous study. We applied the approach with CS1 college students, and conducted a comparative study, with an experiment group and a control group. We display a summary of the study's results, together with the students' opinions about the applied approach.},
  timestamp = {2016-01-21T18:03:25Z},
  booktitle = {Proceeding of the 44th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '13},
  publisher = {{ACM}},
  author = {Ginat, David and Shmalo, Ronit},
  urldate = {2016-01-21},
  date = {2013},
  pages = {353--358},
  keywords = {constructivism,learning from errors,OOP},
  file = {Ginat+Shmalo_2013_Constructive_Use_of_Errors_in_Teaching_CS1.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/CBHW7524/Ginat+Shmalo_2013_Constructive_Use_of_Errors_in_Teaching_CS1.pdf:application/pdf}
}

@inproceedings{dingle_assessing_2000,
  location = {{USA}},
  title = {Assessing the {{Ripple Effect}} of {{CS1 Language Choice}}},
  url = {http://dl.acm.org/citation.cfm?id=369274.369331},
  abstract = {Java has reinvigorated the debate on the `best' language to use for CS1. Much of the controversy centers on the goals of CS1, specific language constructs that either hinder or support the first formal introduction to programming, and, even, `real-world' relevance. Missing from typical discussions is the effect of the language choice in CS1 on CS2 and subsequent courses in the CS curriculum. In all such dialogues, it is important to note the characteristics of the department at hand. While many programs can afford to choose a language (such as Scheme) purely for pedagogical reasons, others (if not most), due to pressure from students, industry, advisory boards, select a language with some market appeal. Small departments that serve students who expect an immediate transition to a professional job typically choose a traditional procedural language like C, Pascal, Modula-2, or a popular OO language like C++, Java, Ada95, or Visual Basic. Hence, we focus here on the choice of one of these languages, and the resulting effects on students' progression in the CS curriculum.},
  timestamp = {2016-01-25T19:42:03Z},
  booktitle = {Proceedings of the {{Second Annual CCSC}} on {{Computing}} in {{Small Colleges Northwestern Conference}}},
  publisher = {{Consortium for Computing Sciences in Colleges}},
  author = {Dingle, Adair and Zander, Carol},
  urldate = {2016-01-25},
  date = {2000},
  pages = {85--93},
  file = {Dingle+Zander_2000_Assessing_the_Ripple_Effect_of_CS1_Language_Choice.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/2PJTJV4E/Dingle+Zander_2000_Assessing_the_Ripple_Effect_of_CS1_Language_Choice.pdf:application/pdf}
}

@inproceedings{ragonis_understanding_2005,
  location = {{New York, NY, USA}},
  title = {On {{Understanding}} the {{Statics}} and {{Dynamics}} of {{Object}}-oriented {{Programs}}},
  isbn = {978-1-58113-997-6},
  url = {http://doi.acm.org/10.1145/1047344.1047425},
  doi = {10.1145/1047344.1047425},
  abstract = {This paper describes research into the influence of using static (class and object) visualization on understanding program flow in object-oriented programming. We found that the advantages of using the static visualization in the first stages of learning could become disadvantages in the advanced stages. The teacher must be aware of these pitfalls and plan the learning sequence accordingly. We think that the BlueJ learning environment that we used should be augmented with dynamic visualization so that students can coordinate the static and dynamic aspects of object-oriented programs.},
  timestamp = {2016-01-25T20:05:25Z},
  booktitle = {Proceedings of the 36th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '05},
  publisher = {{ACM}},
  author = {Ragonis, Noa and Ben-Ari, Mordechai},
  urldate = {2016-01-25},
  date = {2005},
  pages = {226--230},
  keywords = {BlueJ,object-oriented programming,program flow,visualization},
  file = {Ragonis+Ben-Ari_2005_On_Understanding_the_Statics_and_Dynamics_of_Object-oriented_Programs.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/KXHX4US9/Ragonis+Ben-Ari_2005_On_Understanding_the_Statics_and_Dynamics_of_Object-oriented_Programs.pdf:application/pdf}
}

@inproceedings{reed_incorporating_1998,
  location = {{New York, NY, USA}},
  title = {Incorporating {{Problem}}-solving {{Patterns}} in {{CS1}}},
  isbn = {978-0-89791-994-4},
  url = {http://doi.acm.org/10.1145/273133.273137},
  doi = {10.1145/273133.273137},
  abstract = {In {[}Wall96], Wallingford describes an approach to introductory courses that is based on programming patterns, i.e., algorithms or problem-solving approaches that can be applied to various applications. By focusing on patterns such as "Input-Process-Test" or "Process all items in a collection", students reason at a higher-level of abstraction when solving problems. In addition, code schema can be provided which apply to certain patterns, and these schema then serve as frameworks for program development. (See also {[}Rist89], {[}Coad92], and {[}GHJV95].)Closely related to the patterns approach is the use of themes in a programming course. Selecting a particular idea (such as self-reference {[}Astr94]), methodology (such as formal specifications {[}MH96]), or application domain (such as databases {[}AR95]) provides a framework for learning new techniques and concepts. Once a concept has been studied in one context, new applications which similarly utilize that concept can be understood more easily.This paper describes the use of a particular problem-solving pattern, binary reduction, as a recurring theme in the CS1 course. Other problem-solving approaches, such as divide-and-conquer or generate-and-test, could similarly be used. By introducing problem-solving patterns early in the course and then revisiting them in different contexts, students learn to look for common characteristics in problems, and to use an existing solution as a framework for solving related problems. Perhaps more importantly, understanding the behavior of one problem solution can simplify the analysis of other problem solutions based on the same pattern.},
  timestamp = {2016-01-28T02:28:47Z},
  booktitle = {Proceedings of the {{Twenty}}-ninth {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '98},
  publisher = {{ACM}},
  author = {Reed, David},
  urldate = {2016-01-28},
  date = {1998},
  pages = {6--9},
  file = {Reed_1998_Incorporating_Problem-solving_Patterns_in_CS1.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/WQECTHFT/Reed_1998_Incorporating_Problem-solving_Patterns_in_CS1.pdf:application/pdf}
}

@inproceedings{wallingford_first_1996,
  location = {{New York, NY, USA}},
  title = {Toward a {{First Course Based}} on {{Object}}-oriented {{Patterns}}},
  isbn = {978-0-89791-757-5},
  url = {http://doi.acm.org/10.1145/236452.236485},
  doi = {10.1145/236452.236485},
  timestamp = {2016-01-28T02:28:13Z},
  booktitle = {Proceedings of the {{Twenty}}-seventh {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '96},
  publisher = {{ACM}},
  author = {Wallingford, Eugene},
  urldate = {2016-01-28},
  date = {1996},
  pages = {27--31},
  keywords = {object orientation,OOP,patternbased approach to programming education,patterns},
  file = {Wallingford_1996_Toward_a_First_Course_Based_on_Object-oriented_Patterns.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/IZW3ZM3S/Wallingford_1996_Toward_a_First_Course_Based_on_Object-oriented_Patterns.pdf:application/pdf}
}

@inproceedings{clancy_patterns_1999,
  location = {{New York, NY, USA}},
  title = {Patterns and {{Pedagogy}}},
  isbn = {978-1-58113-085-0},
  url = {http://doi.acm.org/10.1145/299649.299673},
  doi = {10.1145/299649.299673},
  abstract = {In this paper, we review research results relating to the use of software design patterns and advocate knowledge integration perspectives on programming instruction. We also describe a number of components of instruction that would lead to more effective use of patterns and better integration of programming knowledge in general.},
  timestamp = {2016-01-28T03:34:52Z},
  booktitle = {The {{Proceedings}} of the {{Thirtieth SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '99},
  publisher = {{ACM}},
  author = {Clancy, Michael J. and Linn, Marcia C.},
  urldate = {2016-01-28},
  date = {1999},
  pages = {37--42},
  file = {Clancy+Linn_1999_Patterns_and_Pedagogy.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/K89UZDAB/Clancy+Linn_1999_Patterns_and_Pedagogy.pdf:application/pdf}
}

@inproceedings{thomas_scaffolding_2004,
  location = {{New York, NY, USA}},
  title = {Scaffolding with {{Object Diagrams}} in {{First Year Programming Classes}}: {{Some Unexpected Results}}},
  isbn = {978-1-58113-798-9},
  url = {http://doi.acm.org/10.1145/971300.971390},
  doi = {10.1145/971300.971390},
  shorttitle = {Scaffolding with {{Object Diagrams}} in {{First Year Programming Classes}}},
  abstract = {This paper reports on an experiment in which first year programming students were given explicit encouragement to use Object (Instance) diagrams when tracing code in multiple-choice questions. We conjectured that by providing scaffolding in this technique, students would be helped to understand the code better and that they would then continue to draw their own diagrams in similar situations. This turned out not to be the case. Although generally students who draw diagrams do better in questions that test their understanding of code behaviour and object referencing, our intervention does not appear to have helped students and the students who were exposed to the intervention were not more likely to go on to use the technique themselves.},
  timestamp = {2016-01-20T21:43:15Z},
  booktitle = {Proceedings of the 35th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  series = {SIGCSE '04},
  publisher = {{ACM}},
  author = {Thomas, Lynda and Ratcliffe, Mark and Thomasson, Benjy},
  urldate = {2016-01-20},
  date = {2004},
  pages = {250--254},
  keywords = {ASEE2016/non-us,first year programming,interaction diagrams,object diagrams,tracing code},
  file = {Thomas_et_al_2004_Scaffolding_with_Object_Diagrams_in_First_Year_Programming_Classes.pdf:/home/dmaczka/.zotero/zotero/s6ljap9f.default/zotero/storage/V4HCHCAD/Thomas_et_al_2004_Scaffolding_with_Object_Diagrams_in_First_Year_Programming_Classes.pdf:application/pdf}
}

@comment{jabref-meta: groupsversion:3;}
@comment{jabref-meta: groupstree:
0 AllEntriesGroup:;
1 ExplicitGroup:ASEE2016\;0\;turkle_epistemological_1990\;;
2 ExplicitGroup:Background\;0\;robins_learning_2003\;pears_survey_2007
-1\;kolling_problem_1999\;streveler_learning_2008\;engelbart_augmentin
g_1962\;turkle_epistemological_1990\;papert_mindstorms_1980\;sheard_an
alysis_2009\;kay_history_1996\;whitehouse_computer_2016\;code.org_ever
y_2016\;nae_educating_2004\;bishop_flipped_2013\;flynn_engineering_201
4\;;
3 ExplicitGroup:flipped classrooms\;0\;grimmelmann_merchants_2014\;des
antis_students_2015\;;
3 ExplicitGroup:surveys\;0\;robins_learning_2003\;pears_survey_2007-1\
;koulouri_teaching_2014\;mccracken_multinational_2001\;lahtinen_study_
2005\;;
2 ExplicitGroup:increasing diversity\;0\;cohoon_introductory_2007\;ric
h_cs1_2004\;;
2 ExplicitGroup:Paradigms\;0\;kolling_problem_1999\;reges_back_2006\;;
3 ExplicitGroup:Why OOP or X?\;0\;goldwasser_teaching_2008\;moritz_obj
ectsfirst_2005\;;
3 ExplicitGroup:Functional\;0\;felleisen_functional_2009\;crestani_exp
erience_2010\;;
3 ExplicitGroup:Problem solving first\;0\;;
2 ExplicitGroup:Practices\;0\;stiller_teaching_2009\;deraadt_chick_200
6\;;
3 ExplicitGroup:iconic learning\;0\;hundhausen_can_2009\;calloni_iconi
c_1997\;weintrop_block_2015\;;
3 ExplicitGroup:pair programming\;0\;;
2 ExplicitGroup:cognition\;0\;east_patternbased_1996\;mccartney_limina
l_2009\;boustedt_threshold_2007\;meyer_threshold_2005\;caspersen_instr
uctional_2007-1\;eckerdal_limen_2007\;perrenet_levels_2006\;ma_using_2
008\;bergin_examining_2005\;bennedssen_abstraction_2008\;murphy_multii
nstitutional_2005\;paas_cognitive_2003\;litzinger_cognitive_2010\;bran
sford_how_2000\;ambrose_chapter_2010\;slotta_helping_2006\;;
2 ExplicitGroup:learning systems\;0\;pellegrino_rethinking_2006\;pelle
grino_science_2014\;felder_designing_2003\;;
2 ExplicitGroup:framework\;0\;biggs_enhancing_1996\;pellegrino_rethink
ing_2006\;felder_designing_2003\;jamieson_creating_2009\;;
1 ExplicitGroup:Background\;0\;robins_learning_2003\;pears_survey_2007
-1\;kolling_problem_1999\;streveler_learning_2008\;engelbart_augmentin
g_1962\;turkle_epistemological_1990\;papert_mindstorms_1980\;sheard_an
alysis_2009\;kay_history_1996\;whitehouse_computer_2016\;code.org_ever
y_2016\;nae_educating_2004\;bishop_flipped_2013\;flynn_engineering_201
4\;;
2 ExplicitGroup:flipped classrooms\;0\;grimmelmann_merchants_2014\;des
antis_students_2015\;;
2 ExplicitGroup:surveys\;0\;robins_learning_2003\;pears_survey_2007-1\
;koulouri_teaching_2014\;mccracken_multinational_2001\;lahtinen_study_
2005\;;
1 ExplicitGroup:flipped classrooms\;0\;grimmelmann_merchants_2014\;des
antis_students_2015\;;
1 ExplicitGroup:surveys\;0\;robins_learning_2003\;pears_survey_2007-1\
;koulouri_teaching_2014\;mccracken_multinational_2001\;lahtinen_study_
2005\;;
1 ExplicitGroup:increasing diversity\;0\;cohoon_introductory_2007\;ric
h_cs1_2004\;;
1 ExplicitGroup:Paradigms\;0\;kolling_problem_1999\;reges_back_2006\;;
2 ExplicitGroup:Why OOP or X?\;0\;goldwasser_teaching_2008\;moritz_obj
ectsfirst_2005\;;
2 ExplicitGroup:Functional\;0\;felleisen_functional_2009\;crestani_exp
erience_2010\;;
2 ExplicitGroup:Problem solving first\;0\;;
1 ExplicitGroup:Why OOP or X?\;0\;goldwasser_teaching_2008\;moritz_obj
ectsfirst_2005\;;
1 ExplicitGroup:Functional\;0\;felleisen_functional_2009\;crestani_exp
erience_2010\;;
1 ExplicitGroup:Problem solving first\;0\;;
1 ExplicitGroup:Practices\;0\;stiller_teaching_2009\;deraadt_chick_200
6\;;
2 ExplicitGroup:iconic learning\;0\;hundhausen_can_2009\;calloni_iconi
c_1997\;weintrop_block_2015\;;
2 ExplicitGroup:pair programming\;0\;;
1 ExplicitGroup:iconic learning\;0\;hundhausen_can_2009\;calloni_iconi
c_1997\;weintrop_block_2015\;;
1 ExplicitGroup:pair programming\;0\;;
1 ExplicitGroup:cognition\;0\;east_patternbased_1996\;mccartney_limina
l_2009\;boustedt_threshold_2007\;meyer_threshold_2005\;caspersen_instr
uctional_2007-1\;eckerdal_limen_2007\;perrenet_levels_2006\;ma_using_2
008\;bergin_examining_2005\;bennedssen_abstraction_2008\;murphy_multii
nstitutional_2005\;paas_cognitive_2003\;litzinger_cognitive_2010\;bran
sford_how_2000\;ambrose_chapter_2010\;slotta_helping_2006\;;
1 ExplicitGroup:learning systems\;0\;pellegrino_rethinking_2006\;pelle
grino_science_2014\;felder_designing_2003\;;
1 ExplicitGroup:framework\;0\;biggs_enhancing_1996\;pellegrino_rethink
ing_2006\;felder_designing_2003\;jamieson_creating_2009\;;
1 ExplicitGroup:Assessment\;0\;mccracken_multinational_2001\;traynor_s
ynthesis_2005\;lister_blooming_2000\;lister_ten_2011\;sheard_exploring
_2011\;lister_objectives_2001\;;
1 ExplicitGroup:Culture of Computing\;0\;mccracken_multinational_2001\
;raymond_art_2003\;dehnadi_camel_2006\;ensmenger_making_2010\;hicks_me
ritocracy_2010\;kelty_two_2008\;sydell_forgotten_2014\;hammerman_adas_
2015\;abbate_recoding_2012\;isaacson_innovators_2014\;blum_evolving_20
05\;;
1 ExplicitGroup:Identity\;0\;stout_lesbian_2015\;thomas_code_2003\;_re
sults\;mckenna_transparent_2000\;;
1 ExplicitGroup:Instruction\;0\;kolling_problem_1999\;east_patternbase
d_1996\;boyer_impact_2009\;manzo_comes_1978\;calloni_iconic_1997\;dupr
as_thoughts_1984\;astrachan_why_2004\;bruce_introducing_2010\;goldwass
er_teaching_2008\;wood_building_2015\;vilner_fundamental_2007\;ginat_c
onstructive_2013\;felleisen_functional_2009\;stiller_teaching_2009\;di
ngle_assessing_2000\;thomas_learning_2002\;boustedt_threshold_2007\;re
ges_back_2006\;moritz_objectsfirst_2005\;ragonis_understanding_2005\;r
eed_incorporating_1998\;wallingford_first_1996\;clancy_patterns_1999\;;
1 ExplicitGroup:Interventions\;0\;hundhausen_can_2009\;thomas_scaffold
ing_2004\;cohoon_introductory_2007\;;
1 ExplicitGroup:Learning Styles\;0\;thomas_learning_2002\;;
1 ExplicitGroup:non-majors\;0\;forte_motivation_2005\;guzdial_design_2
005\;rich_cs1_2004\;;
}

